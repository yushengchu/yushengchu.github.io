<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog with sandsyu</title>
  <subtitle>隐约雷鸣 阴霾天空 但盼风雨来 能留你在此.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-07T12:18:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sandsyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-Native 不使用第三方服务实现iOS&amp;Android增量热更新</title>
    <link href="http://yoursite.com/2017/09/07/React-Native%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0iOS&amp;Android%E5%A2%9E%E9%87%8F%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2017/09/07/React-Native 不使用第三方服务实现iOS&amp;Android增量热更新/</id>
    <published>2017-09-07T06:08:31.000Z</published>
    <updated>2017-09-07T12:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>流程图:<br>    <img src="http://oif61bzoy.bkt.clouddn.com/15047699265651.jpg" alt=""></p>
</blockquote>
<a id="more"></a>
<p>#####简单实现:<br>iOS Demo地址:<a href="https://github.com/yushengchu/Incremental-hot-update" target="_blank" rel="external">https://github.com/yushengchu/Incremental-hot-update</a></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 热更细管理类</span></div><div class="line"><span class="comment">//  HotUpdataManage.h</span></div><div class="line"><span class="comment">//  hotUpdataDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by joker on 2017/9/7.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Facebook. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HotUpdataManage</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">//单例方法</span></div><div class="line">+ (HotUpdataManage*)getInstance;</div><div class="line"></div><div class="line"><span class="comment">//获取加载URL</span></div><div class="line">- (<span class="built_in">NSURL</span>*)getBridge;</div><div class="line"></div><div class="line"><span class="comment">//检查更新</span></div><div class="line">- (<span class="keyword">void</span>)checkUpdate:(<span class="built_in">NSString</span>*)checkUrl;</div><div class="line"></div><div class="line"><span class="comment">//bridge对象 用于重新载入jsbundle</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) RCTBridge *bridge;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  HotUpdataManage.m</span></div><div class="line"><span class="comment">//  hotUpdataDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by joker on 2017/9/7.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Facebook. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"HotUpdataManage.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MXHZIPArchive.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"DiffPatch.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#define HOT_MAIN_DOC_PATH [NSString stringWithFormat:@<span class="meta-string">"%@/HOTSDK/main"</span>,NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0]]</span></div><div class="line"><span class="meta">#define HOT_JS_PATH [NSString stringWithFormat:@<span class="meta-string">"%@/HOTSDK/main/%@"</span>,NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0],@<span class="meta-string">"main.jsbundle"</span>]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HotUpdataManage</span></span></div><div class="line"></div><div class="line">+ (HotUpdataManage*)getInstance&#123;</div><div class="line">  <span class="keyword">static</span> HotUpdataManage *manager;</div><div class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">    manager = [[HotUpdataManage alloc] init];</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> manager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 获取bridge</span></div><div class="line">- (<span class="built_in">NSURL</span>*)getBridge&#123;</div><div class="line">  <span class="built_in">NSFileManager</span> *fileManager =[<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">  <span class="keyword">if</span> (![fileManager fileExistsAtPath:HOT_JS_PATH]) &#123;</div><div class="line">    <span class="built_in">NSString</span>* zipPatch = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"bundle"</span> ofType:<span class="string">@"zip"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"zipPatch ---&gt; %@"</span>,zipPatch);</div><div class="line">    <span class="keyword">if</span>([fileManager fileExistsAtPath:zipPatch])&#123;</div><div class="line">      <span class="built_in">BOOL</span> isReload = [<span class="keyword">self</span> unzipBundleAndReload:zipPatch];</div><div class="line">      <span class="comment">//复制jsbundle文件和assest文件到到对应目录</span></div><div class="line">      <span class="keyword">if</span> (isReload) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="built_in">NSURL</span> URLWithString:HOT_JS_PATH];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> [<span class="built_in">NSURL</span> URLWithString:HOT_JS_PATH];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 检查更新</span></div><div class="line">- (<span class="keyword">void</span>)checkUpdate:(<span class="built_in">NSString</span>*)urlStr&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString: urlStr];</div><div class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL: url cachePolicy: <span class="built_in">NSURLRequestUseProtocolCachePolicy</span> timeoutInterval: <span class="number">10</span>];</div><div class="line">    [request setHTTPMethod: <span class="string">@"GET"</span>];</div><div class="line">    <span class="built_in">NSData</span>   *data = [<span class="built_in">NSURLConnection</span> sendSynchronousRequest:request</div><div class="line">                                           returningResponse:<span class="literal">nil</span></div><div class="line">                                                       error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (data)&#123;</div><div class="line">      <span class="built_in">NSDictionary</span> *resultInfo = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="built_in">NSJSONReadingAllowFragments</span> error:<span class="literal">nil</span>];</div><div class="line">      <span class="keyword">if</span> ([resultInfo[<span class="string">@"isUpdate"</span>] boolValue]) &#123;</div><div class="line">        [<span class="keyword">self</span> downLoadFile:[resultInfo objectForKey:<span class="string">@"updataUrl"</span>]];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 下载</span></div><div class="line">- (<span class="keyword">void</span>)downLoadFile:(<span class="built_in">NSString</span> *)urlString&#123;</div><div class="line">  <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:urlString];</div><div class="line">  <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL: url cachePolicy: <span class="built_in">NSURLRequestUseProtocolCachePolicy</span> timeoutInterval: <span class="number">10</span>];</div><div class="line">  [request setHTTPMethod: <span class="string">@"GET"</span>];</div><div class="line">  <span class="built_in">NSData</span> *data = [<span class="built_in">NSURLConnection</span> sendSynchronousRequest:request returningResponse:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div><div class="line">  <span class="keyword">if</span> (data)&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"diff下载成功"</span>);</div><div class="line">    <span class="built_in">NSString</span> *pacthPath = [<span class="keyword">self</span> getFilePath:<span class="string">@"diff.patch"</span>];</div><div class="line">    <span class="keyword">if</span> ([data writeToFile:pacthPath atomically:<span class="literal">YES</span>]) &#123;</div><div class="line">      [<span class="keyword">self</span> patchBundle:pacthPath];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="built_in">NSLog</span>(<span class="string">@"diff保存失败."</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"diff下载失败"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)patchBundle:(<span class="built_in">NSString</span>*)pacthPath&#123;</div><div class="line">  <span class="built_in">NSString</span>* zipPatch = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"bundle"</span> ofType:<span class="string">@"zip"</span>];</div><div class="line">  <span class="built_in">NSString</span>* tmpZipPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/tmp.zip"</span>,HOT_MAIN_DOC_PATH];</div><div class="line">  <span class="comment">//  创建最新jsbundel文件</span></div><div class="line">  <span class="built_in">BOOL</span> writeBundel =   [DiffPatch beginPatch:pacthPath origin:zipPatch toDestination:tmpZipPath];</div><div class="line">  <span class="keyword">if</span> (!writeBundel) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"bundel写入失败"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ([<span class="keyword">self</span> unzipBundleAndReload:tmpZipPath]) &#123;</div><div class="line">    [<span class="keyword">self</span> reloadNow];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"更新成功"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 解压</span></div><div class="line">-(<span class="built_in">BOOL</span>)unzipBundleAndReload:(<span class="built_in">NSString</span>*)zipPath&#123;</div><div class="line">  <span class="comment">//获取zipPath</span></div><div class="line">  <span class="built_in">NSError</span> *error;</div><div class="line">  <span class="built_in">NSString</span> *reload_zipPath = zipPath;</div><div class="line">  <span class="built_in">NSString</span> *desPath = HOT_MAIN_DOC_PATH;</div><div class="line">  <span class="built_in">BOOL</span> pathExist = [[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:desPath];</div><div class="line">  <span class="keyword">if</span>(!pathExist)&#123;</div><div class="line">    [[<span class="built_in">NSFileManager</span> defaultManager] createDirectoryAtPath:desPath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//  NSLog(@"start unzip zip Path:%@",reload_zipPath);</span></div><div class="line">  [MXHZIPArchive unzipFileAtPath:reload_zipPath toDestination:desPath overwrite:<span class="literal">YES</span> password:<span class="literal">nil</span> error:&amp;error];</div><div class="line">  <span class="keyword">if</span>(!error)&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"解压成功,路径:%@"</span>,desPath);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"解压失败,路径:%@，错误原因:%@"</span>,desPath,[error description]);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark 重新加载</span></div><div class="line">-(<span class="keyword">void</span>)reloadNow&#123;</div><div class="line">  [<span class="keyword">self</span>.bridge reload];</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"Bridge reload"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span>*)getFilePath:(<span class="built_in">NSString</span>*)fileName&#123;</div><div class="line">  <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">  <span class="built_in">NSString</span> *documentsDirectory =[paths objectAtIndex:<span class="number">0</span>];</div><div class="line">  <span class="built_in">NSString</span> *filePath =[documentsDirectory stringByAppendingPathComponent:fileName];</div><div class="line">  <span class="keyword">return</span> filePath;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AppDelegate中使用</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"HotUpdataManage.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span>()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) RCTBridge *bridge;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</div><div class="line">&#123;</div><div class="line">  HotUpdataManage* manage = [HotUpdataManage getInstance];</div><div class="line">  <span class="built_in">NSURL</span>* localUrl = <span class="literal">nil</span>;</div><div class="line">  <span class="meta">#ifdef  DEBUG</span></div><div class="line">    localUrl = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class="string">@"index.ios"</span> fallbackResource:<span class="literal">nil</span>];</div><div class="line">  <span class="meta">#else</span></div><div class="line">    localUrl = [manage getBridge];</div><div class="line">  <span class="meta">#endif</span></div><div class="line">  <span class="comment">//使用bridge的方式创建rootView</span></div><div class="line">  _bridge = [[RCTBridge alloc] initWithBundleURL:localUrl moduleProvider:<span class="literal">nil</span> launchOptions:<span class="literal">nil</span>];</div><div class="line">  manage.bridge = _bridge;</div><div class="line">  </div><div class="line">  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:_bridge moduleName:<span class="string">@"hotUpdataDemo"</span> initialProperties:<span class="literal">nil</span>];</div><div class="line">  </div><div class="line">  rootView.backgroundColor = [[<span class="built_in">UIColor</span> alloc] initWithRed:<span class="number">1.0</span>f green:<span class="number">1.0</span>f blue:<span class="number">1.0</span>f alpha:<span class="number">1</span>];</div><div class="line"></div><div class="line">  <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</div><div class="line">  <span class="built_in">UIViewController</span> *rootViewController = [<span class="built_in">UIViewController</span> new];</div><div class="line">  rootViewController.view = rootView;</div><div class="line">  <span class="keyword">self</span>.window.rootViewController = rootViewController;</div><div class="line">  [<span class="keyword">self</span>.window makeKeyAndVisible];</div><div class="line">  </div><div class="line">  <span class="comment">//检查更新 这里使用的是阿里的rap mock接口</span></div><div class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    [manage checkUpdate:<span class="string">@"http://rapapi.org/mockjsdata/13203/checkUpdate"</span>];</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>后言</p>
</blockquote>
<p>包括pushy在内的许多支持增量热更新的类库,实际上只是对jsbundle文件进行了diff算法.</p>
<p>图片是通过在服务器进行筛选获取新增或者更改的图片,然后与jsbundle的diff文件一同打包成一个压缩包给客户端进行热更新.</p>
<p>本Demo采用的是对整个bundle.zip文件进行diff,直接获得一个针对旧版bundle.zip文件的热更新文件.</p>
<p>iOS打包中,会默认将jsbundle和assest文件夹打入ipa包中,并不会将bundle.zip文件打入.</p>
<p>这一块需要通过打包脚本来实现默认将bundle.zip打入ipa包内.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;流程图:&lt;br&gt;    &lt;img src=&quot;http://oif61bzoy.bkt.clouddn.com/15047699265651.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 悬浮窗口播放器简单实现</title>
    <link href="http://yoursite.com/2017/04/29/iOS%E5%BC%80%E5%8F%91%20%E6%82%AC%E6%B5%AE%E7%AA%97%E5%8F%A3%E6%92%AD%E6%94%BE%E5%99%A8%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/04/29/iOS开发 悬浮窗口播放器简单实现/</id>
    <published>2017-04-29T09:26:36.000Z</published>
    <updated>2017-04-29T09:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>场景</p>
</blockquote>
<p>公司新项目是一个直播类型的项目,要求实现类似熊猫or斗鱼那种退出直播详情界面衔接一个悬浮(可随意拖动)的播放器继续播放.<br>考虑到无缝衔接的需求和重新加载延迟缓冲的问题,大体定下一个思路是用一个单例对象来实现这个功能,单例对象包含一个播放器对象和一些需要用的参数等.</p>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="http://oif61bzoy.bkt.clouddn.com/NEPlayer2.gif" alt="-w415"><br><a id="more"></a></p>
<blockquote>
<p>实现</p>
</blockquote>
<p>播放器使用了网易直播提供的NELivePlayer,集成该播放器可以参考网易官网的集成文档:<a href="http://vcloud.163.com/docs/live/player.html" target="_blank" rel="external">http://vcloud.163.com/docs/live/player.html</a> 播放器底层使用的是bilibili开源的ijkplaer</p>
<p><strong>注:只能真机调试,模拟器播放器会创建失败.</strong></p>
<pre><code>流程:
    1.创建PlayerShowView对象传入直播url
    2.PlayerShowView内部获取PlayObj单利对象,传入直播url,获得播放器视图,添加到自身
    3.PlayObj获取到直播url,判断是否已经有创建的播放器对象 || 是否是正在播放的直播等做不同操作
    4.退出播放详情页-调用delloc时发送一个通知,在根视图控制器接受消息创建悬浮播放器
</code></pre><p>PlayObj.h</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;NELivePlayer/NELivePlayer.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;NELivePlayer/NELivePlayerController.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Masonry.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;YYKit.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"UIDevice+XJDevice.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MLRefreshView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">PlayObjDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjFull;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjclose;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjRestConnect;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjBack;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayObj</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> 直播播放器 </div><div class="line"> */</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span>&lt;NELivePlayer&gt; liveplayer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 播放url</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* liveUrl;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 是否悬浮窗口播放</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isSuspend;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 是否全屏</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isFull;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;PlayObjDelegate&gt;delagete;</div><div class="line"></div><div class="line">+ (PlayObj*)getInstance;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)shutDown;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>PlayObj.m</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  PlayObj.m</span></div><div class="line"><span class="comment">//  ijkplayerDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sands on 2017/3/5.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 wanglei. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"PlayObj.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayObj</span>()</span></div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> 返回按钮</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span> *backButton;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> 屏幕切换按钮</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span> *orientationButton;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 关闭按钮</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span> *closeButton;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> loadingView</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) MLRefreshView *indicator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 加载提示</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UILabel</span>* lodingTextLabel;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 加载失败提示视图</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIView</span>* faildView;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 定时器-判断加载超时</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSTimer</span>* inOutTimer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> inOutNumber;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> PlayObj *playObj = <span class="literal">nil</span>;</div><div class="line"><span class="meta">#define MAX_LODING_TIME 30 //最大加载时间 超过这个时间显示连接失败提示</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PlayObj</span></span></div><div class="line"></div><div class="line">+ (PlayObj*)getInstance&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        playObj = [[PlayObj alloc]init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> playObj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.inOutTimer = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark =================defaultUI==================</span></div><div class="line">- (<span class="keyword">void</span>)defaultWithPlaye&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.liveplayer = [[NELivePlayerController alloc]</div><div class="line">                       initWithContentURL:[<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.liveUrl]];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.liveplayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"failed to initialize!"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.liveplayer.view.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="built_in">CGRectGetWidth</span>([<span class="built_in">UIScreen</span> mainScreen].bounds), <span class="number">210</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.liveplayer.view.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    </div><div class="line">    <span class="comment">//设置播放缓冲策略，直播采用低延时模式或流畅模式，点播采用抗抖动模式，具体可参见API文档</span></div><div class="line">    [<span class="keyword">self</span>.liveplayer setBufferStrategy:NELPLowDelay];</div><div class="line">    <span class="comment">//设置画面显示模式，默认按原始大小进行播放，具体可参见API文档</span></div><div class="line">    [<span class="keyword">self</span>.liveplayer setScalingMode:NELPMovieScalingModeNone];</div><div class="line">    <span class="comment">//设置视频文件初始化完成后是否自动播放，默认自动播放</span></div><div class="line">    [<span class="keyword">self</span>.liveplayer setShouldAutoplay:<span class="literal">YES</span>];</div><div class="line">    <span class="comment">//设置是否开启硬件解码，IOS 8.0以上支持硬件解码，默认为软件解码</span></div><div class="line">    [<span class="keyword">self</span>.liveplayer setHardwareDecoder:<span class="literal">YES</span>];</div><div class="line">    <span class="comment">//设置播放器切入后台后时暂停还是继续播放，默认暂停</span></div><div class="line">    [<span class="keyword">self</span>.liveplayer setPauseInBackground:<span class="literal">NO</span>];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.liveplayer prepareToPlay];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> defaultOtherUI];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> initNotification];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)defaultOtherUI&#123;</div><div class="line">    <span class="keyword">if</span> (_backButton != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    [<span class="keyword">self</span>.backButton mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.top.mas_equalTo(@<span class="number">16</span>);</div><div class="line">        make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">30.</span>f,<span class="number">30.</span>f));</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.orientationButton mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.right.bottom.mas_equalTo(@(<span class="number">-16</span>));</div><div class="line">        make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">30.</span>f, <span class="number">30.</span>f));</div><div class="line">    &#125;];</div><div class="line"> </div><div class="line">    [<span class="keyword">self</span>.indicator mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.centerY.mas_equalTo(weak_self.liveplayer.view.mas_centerY);</div><div class="line">        make.centerX.mas_equalTo(weak_self.liveplayer.view.mas_centerX);</div><div class="line">        make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">20.</span>f,<span class="number">20.</span>f));</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.lodingTextLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.centerX.mas_equalTo(weak_self.liveplayer.view.mas_centerX);</div><div class="line">        make.top.equalTo(weak_self.indicator.mas_bottom).with.offset(<span class="number">5</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.closeButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.mas_equalTo(@<span class="number">10</span>);</div><div class="line">        make.right.mas_equalTo(@<span class="number">-10</span>);</div><div class="line">        make.size.mas_equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">15.</span>f, <span class="number">15.</span>f));</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.faildView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.size.mas_equalTo(weak_self.liveplayer.view);</div><div class="line">        make.center.mas_equalTo(weak_self.liveplayer.view);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark sett</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 传入url初始化播发器</div><div class="line"></div><div class="line"> @param liveUrl 直播地址</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setLiveUrl:(<span class="built_in">NSString</span> *)liveUrl&#123;</div><div class="line">    _liveUrl = liveUrl;</div><div class="line">    [<span class="keyword">self</span> defaultWithPlaye];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 根据isSuspend展示不同的OtherUI</div><div class="line"></div><div class="line"> @param isSuspend 是否悬浮窗口</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setIsSuspend:(<span class="built_in">BOOL</span>)isSuspend&#123;</div><div class="line">    _isSuspend = isSuspend;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isSuspend) &#123;</div><div class="line">        <span class="keyword">self</span>.backButton.hidden = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">self</span>.orientationButton.hidden = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">self</span>.closeButton.hidden = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 详情页内非全屏不显示返回按钮</div><div class="line"></div><div class="line"> @param isFull 是否全屏</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setIsFull:(<span class="built_in">BOOL</span>)isFull&#123;</div><div class="line">    _isFull = isFull;</div><div class="line">    <span class="keyword">self</span>.backButton.hidden = !_isFull;</div><div class="line">    <span class="keyword">self</span>.orientationButton.hidden = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">self</span>.closeButton.hidden = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark OtherUI (返回 放大 loding 关闭 加载失败)</span></div><div class="line">- (<span class="built_in">UIButton</span>*)backButton</div><div class="line">&#123;</div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">if</span> (!_backButton) &#123;</div><div class="line">        <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">        [button setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"player_backButton_icon_30x30_"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        [button setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"player_backButton_pressIcon_30x30_"</span>] forState:<span class="built_in">UIControlStateHighlighted</span>];</div><div class="line">        [button addBlockForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span> block:^(<span class="keyword">id</span>  _Nonnull sender) &#123;</div><div class="line">            [weak_self.delagete PlayObjBack];</div><div class="line">        &#125;];</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:button];</div><div class="line">        _backButton = button;</div><div class="line">        _backButton.hidden = !_isFull;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _backButton;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIButton</span>*)orientationButton</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_orientationButton) &#123;</div><div class="line">        <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">        [button setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"player_fullScreen_icon_30x30_"</span>] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        [button setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"player_fullScreen_pressIcon_30x30_"</span>] forState:<span class="built_in">UIControlStateHighlighted</span>];</div><div class="line">        [button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(scaleFull) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:button];</div><div class="line">        _orientationButton = button;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _orientationButton;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MLRefreshView*)indicator&#123;</div><div class="line">    <span class="keyword">if</span> (!_indicator) &#123;</div><div class="line">        MLRefreshView* indicator = [MLRefreshView refreshViewWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>) logoStyle:RefreshLogoNone];</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:indicator];</div><div class="line">        _indicator = indicator;</div><div class="line">        [<span class="keyword">self</span> loadingStatus:<span class="literal">YES</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _indicator;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UILabel</span>*)lodingTextLabel&#123;</div><div class="line">    <span class="keyword">if</span> (!_lodingTextLabel) &#123;</div><div class="line">        <span class="built_in">UILabel</span>* label = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>)];</div><div class="line">        label.text  = <span class="string">@"走心加载中"</span>;</div><div class="line">        label.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">        label.textColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        label.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">        label.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">11</span>];</div><div class="line">        _lodingTextLabel = label;</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:label];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _lodingTextLabel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIButton</span>*)closeButton&#123;</div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">if</span> (!_closeButton) &#123;</div><div class="line">        <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">        [button setTitle:<span class="string">@"X"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        [button setBackgroundColor:[<span class="built_in">UIColor</span> redColor]];</div><div class="line">        [button addBlockForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span> block:^(<span class="keyword">id</span>  _Nonnull sender) &#123;</div><div class="line">            [weak_self.delagete PlayObjclose];</div><div class="line">        &#125;];</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:button];</div><div class="line">        _closeButton = button;</div><div class="line">        _closeButton.hidden = !_isSuspend;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _closeButton;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIView</span>*)faildView&#123;</div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">if</span> (!_faildView) &#123;</div><div class="line">        <span class="built_in">UIView</span>* view = [[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">        <span class="built_in">UIImageView</span>* image = [[<span class="built_in">UIImageView</span> alloc]initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"failure"</span>]];</div><div class="line">        image.tag = <span class="number">101</span>;</div><div class="line">        image.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">75</span>);</div><div class="line">        [view addSubview:image];</div><div class="line">        [image mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">            make.center.mas_equalTo(view);</div><div class="line">        &#125;];</div><div class="line">        <span class="built_in">UITapGestureRecognizer</span>* tap = [[<span class="built_in">UITapGestureRecognizer</span> alloc]initWithActionBlock:^(<span class="keyword">id</span>  _Nonnull sender) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"faild View tap"</span>);</div><div class="line">            [weak_self.delagete PlayObjRestConnect];</div><div class="line">            _faildView.hidden = <span class="literal">true</span>;</div><div class="line">        &#125;];</div><div class="line">        [view addGestureRecognizer:tap];</div><div class="line">        [<span class="keyword">self</span>.liveplayer.view addSubview:view];</div><div class="line">        _faildView = view;</div><div class="line">        _faildView.hidden = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _faildView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark notify method</span></div><div class="line">- (<span class="keyword">void</span>)initNotification&#123;</div><div class="line">    <span class="comment">// 播放器媒体流初始化完成后触发，收到该通知表示可以开始播放</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerDidPreparedToPlay:)</div><div class="line">                                                 name:NELivePlayerDidPreparedToPlayNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 播放器加载状态发生变化时触发，如开始缓冲，缓冲结束</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NeLivePlayerloadStateChanged:)</div><div class="line">                                                 name:NELivePlayerLoadStateChangedNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 正常播放结束或播放过程中发生错误导致播放结束时触发的通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerPlayBackFinished:)</div><div class="line">                                                 name:NELivePlayerPlaybackFinishedNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 第一帧视频图像显示时触发的通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerFirstVideoDisplayed:)</div><div class="line">                                                 name:NELivePlayerFirstVideoDisplayedNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 第一帧音频播放时触发的通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerFirstAudioDisplayed:)</div><div class="line">                                                 name:NELivePlayerFirstAudioDisplayedNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// 资源释放成功后触发的通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerReleaseSuccess:)</div><div class="line">                                                 name:NELivePlayerReleaseSueecssNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">    </div><div class="line">    <span class="comment">// 视频码流解析失败时触发的通知</span></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(NELivePlayerVideoParseError:)</div><div class="line">                                                 name:NELivePlayerVideoParseErrorNotification</div><div class="line">                                               object:_liveplayer];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma 通知</span></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerDidPreparedToPlay:(<span class="built_in">NSNotificationCenter</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 播放器媒体流初始化完成后触发，收到该通知表示可以开始播放"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"_liveplayer = %@"</span>,_liveplayer);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NeLivePlayerloadStateChanged:(<span class="built_in">NSNotification</span>*)not&#123;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.liveplayer.loadState) &#123;</div><div class="line">        <span class="keyword">case</span> NELPMovieLoadStatePlayable:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NELPMovieLoadStatePlayable 播放器初始化完成，可以播放"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> NELPMovieLoadStatePlaythroughOK:&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NELPMovieLoadStatePlaythroughOK 缓冲完成"</span>);</div><div class="line">            [<span class="keyword">self</span> loadingStatus:<span class="literal">NO</span>];</div><div class="line">            [<span class="keyword">self</span>.inOutTimer invalidate];</div><div class="line">            _inOutNumber = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> NELPMovieLoadStateStalled:</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NELPMovieLoadStateStalled 缓冲 展示loding.."</span>);</div><div class="line">            [<span class="keyword">self</span> loadingStatus:<span class="literal">YES</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerPlayBackFinished:(<span class="built_in">NSNotification</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 正常播放结束或播放过程中发生错误导致播放结束时触发的通知"</span>);</div><div class="line">    [<span class="keyword">self</span> showFaildViewWithType:<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerFirstVideoDisplayed:(<span class="built_in">NSNotificationCenter</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 第一帧视频图像显示时触发的通知"</span>);</div><div class="line">    [<span class="keyword">self</span> loadingStatus:<span class="literal">NO</span>];</div><div class="line">    [<span class="keyword">self</span> timeEnd];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerFirstAudioDisplayed:(<span class="built_in">NSNotificationCenter</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 第一帧音频播放时触发的通知"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerReleaseSuccess:(<span class="built_in">NSNotificationCenter</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 资源释放成功后触发的通知"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)NELivePlayerVideoParseError:(<span class="built_in">NSNotificationCenter</span>*)not&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"// 视频码流解析失败时触发的通知"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark Other Method</span></div><div class="line">- (<span class="keyword">void</span>)shutDown&#123;</div><div class="line">    [<span class="keyword">self</span>.liveplayer shutdown];</div><div class="line">    [<span class="keyword">self</span>.liveplayer.view removeFromSuperview];</div><div class="line">    <span class="keyword">self</span>.liveplayer = <span class="literal">nil</span>;</div><div class="line">    _liveUrl = <span class="string">@""</span>;</div><div class="line">    [<span class="keyword">self</span> removePlaySub];</div><div class="line">    [<span class="keyword">self</span> timeEnd];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removePlaySub&#123;</div><div class="line">    _faildView = <span class="literal">nil</span>;</div><div class="line">    _orientationButton = <span class="literal">nil</span>;</div><div class="line">    _closeButton = <span class="literal">nil</span>;</div><div class="line">    _indicator = <span class="literal">nil</span>;</div><div class="line">    _lodingTextLabel = <span class="literal">nil</span>;</div><div class="line">    _backButton = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 全屏</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)scaleFull&#123;</div><div class="line">    [<span class="keyword">self</span>.delagete PlayObjFull];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loadingStatus:(<span class="built_in">BOOL</span>)status&#123;</div><div class="line">    _indicator.hidden = !status;</div><div class="line">    _lodingTextLabel.hidden = _indicator.hidden;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (status) &#123;</div><div class="line">        [_indicator startAnimation];</div><div class="line">        _inOutTimer = <span class="number">0</span>;</div><div class="line">        <span class="keyword">self</span>.inOutTimer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span>f target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(checkLiveTimerOut:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            [_indicator stopAnimation];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)checkLiveTimerOut:(<span class="built_in">NSTimer</span>*)timer&#123;</div><div class="line">    _inOutNumber++;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"checkLiveTimerOut %ld"</span>,(<span class="keyword">long</span>)_inOutNumber);</div><div class="line">    <span class="keyword">if</span> (_inOutNumber&gt;=<span class="number">20</span>) &#123;</div><div class="line">        _indicator.hidden = <span class="literal">true</span>;</div><div class="line">        _lodingTextLabel.hidden = <span class="literal">true</span>;</div><div class="line">        [<span class="keyword">self</span>.liveplayer stop];</div><div class="line">        [<span class="keyword">self</span> showFaildViewWithType:<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)timeEnd&#123;</div><div class="line">    [_inOutTimer invalidate];</div><div class="line">    _inOutNumber = <span class="number">0</span>;</div><div class="line">    _inOutTimer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 展示错误提示View</div><div class="line"></div><div class="line"> @param type 1:点击重连 2:主播下播</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)showFaildViewWithType:(<span class="built_in">NSInteger</span>)type&#123;</div><div class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</div><div class="line">        _faildView.hidden = <span class="literal">false</span>;</div><div class="line">        _faildView.userInteractionEnabled = <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">UIImageView</span>* imageView = [_faildView viewWithTag:<span class="number">101</span>];</div><div class="line">        <span class="keyword">if</span> (imageView) &#123;</div><div class="line">            imageView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"live_icon_absent"</span>];</div><div class="line">        &#125;</div><div class="line">        _faildView.hidden = <span class="literal">false</span>;</div><div class="line">        _faildView.userInteractionEnabled = <span class="literal">false</span>;</div><div class="line">        [<span class="keyword">self</span> loadingStatus:<span class="literal">false</span>];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> timeEnd];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>PlayerShowView.h</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  PlayerShowView.h</span></div><div class="line"><span class="comment">//  NEPlyaer</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by fhzx_mac on 2017/3/9.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 sandsyu. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Masonry.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;NELivePlayer/NELivePlayer.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;NELivePlayer/NELivePlayerController.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayerShowView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame connectWithUrl:(<span class="built_in">NSString</span>*)url;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span>&lt;NELivePlayer&gt; liveplayer;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* url;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isFull;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isSuspend;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGRect</span> oldFrame;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>PlayerShowView.m</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  PlayerShowView.m</span></div><div class="line"><span class="comment">//  NEPlyaer</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by fhzx_mac on 2017/3/9.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 sandsyu. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"PlayerShowView.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PlayObj.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PlayerShowView</span>()&lt;<span class="title">PlayObjDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PlayerShowView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame connectWithUrl:(<span class="built_in">NSString</span>*)url</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.url = url;</div><div class="line">        [<span class="keyword">self</span> defaultUI];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)defaultUI&#123;</div><div class="line">    </div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">if</span> ([PlayObj getInstance].liveUrl.length&lt;=<span class="number">0</span>) &#123;</div><div class="line">        [PlayObj getInstance].liveUrl = <span class="keyword">self</span>.url;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">self</span>.url = [PlayObj getInstance].liveUrl;</div><div class="line">    &#125;</div><div class="line">    [PlayObj getInstance].delagete = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span> addSubview:[PlayObj getInstance].liveplayer.view];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> sendSubviewToBack:<span class="keyword">self</span>.liveplayer.view];</div><div class="line">    </div><div class="line">    [[PlayObj getInstance].liveplayer.view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.size.mas_equalTo(weak_self);</div><div class="line">        make.center.mas_equalTo(weak_self);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [PlayObj getInstance].isSuspend = <span class="keyword">self</span>.isSuspend;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setIsSuspend:(<span class="built_in">BOOL</span>)isSuspend&#123;</div><div class="line">    _isSuspend = isSuspend;</div><div class="line">    [PlayObj getInstance].isSuspend = _isSuspend;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setIsFull:(<span class="built_in">BOOL</span>)isFull&#123;</div><div class="line">    _isFull = isFull;</div><div class="line">    [PlayObj getInstance].isFull = isFull;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)PlayObjFull&#123;</div><div class="line">    @weakify(<span class="keyword">self</span>);</div><div class="line">    <span class="keyword">if</span> (!_isFull) &#123;</div><div class="line">        weak_self.oldFrame = weak_self.frame;</div><div class="line">        weak_self.viewController.navigationController.navigationBar.hidden = <span class="literal">true</span>;</div><div class="line">        [<span class="built_in">UIDevice</span> setOrientation:<span class="built_in">UIInterfaceOrientationLandscapeRight</span>];</div><div class="line">        weak_self.frame = weak_self.window.bounds;</div><div class="line">        weak_self.isFull = <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        weak_self.viewController.navigationController.navigationBar.hidden = <span class="literal">false</span>;</div><div class="line">        [<span class="built_in">UIDevice</span> setOrientation:<span class="built_in">UIInterfaceOrientationPortrait</span>];</div><div class="line">        weak_self.frame = weak_self.oldFrame;</div><div class="line">        weak_self.isFull = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjclose&#123;</div><div class="line">    [[PlayObj getInstance]shutDown];</div><div class="line">    [<span class="keyword">self</span> removeFromSuperview];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjRestConnect&#123;</div><div class="line">    [[PlayObj getInstance]shutDown];</div><div class="line">    [<span class="keyword">self</span> defaultUI];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)PlayObjBack&#123;</div><div class="line">    [<span class="keyword">self</span> PlayObjFull];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>使用:</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PlayerShowView* <span class="keyword">View</span> = [[PlayerShowView alloc]initWithFrame:CGRectMake(<span class="number">0</span>, <span class="number">100</span>, self.<span class="keyword">view</span>.width, self.<span class="keyword">view</span>.width*<span class="number">0.6</span>)</div><div class="line">                                              connectWithUrl:self.liveUrl]<span class="comment">;</span></div><div class="line"><span class="keyword">View</span>.isFull = false<span class="comment">;</span></div><div class="line"><span class="keyword">View</span>.isSuspend = false<span class="comment">;</span></div><div class="line">[self.<span class="keyword">view</span> addSubview:<span class="keyword">View</span>]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>具体实现可以参考github上的代码:<br><a href="https://github.com/yushengchu/NEPlyaer" target="_blank" rel="external">https://github.com/yushengchu/NEPlyaer</a></p>
<p>DEMO使用:<br>播放器静态库文件过大上传到百度云<br><a href="https://pan.baidu.com/s/1i4FDtm1" target="_blank" rel="external">https://pan.baidu.com/s/1i4FDtm1</a><br>下载解压,放入项目根目录(xcodeproj文件所在目录)运行即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公司新项目是一个直播类型的项目,要求实现类似熊猫or斗鱼那种退出直播详情界面衔接一个悬浮(可随意拖动)的播放器继续播放.&lt;br&gt;考虑到无缝衔接的需求和重新加载延迟缓冲的问题,大体定下一个思路是用一个单例对象来实现这个功能,单例对象包含一个播放器对象和一些需要用的参数等.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oif61bzoy.bkt.clouddn.com/NEPlayer2.gif&quot; alt=&quot;-w415&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>git使用实录 文件过大无法提交问题解决</title>
    <link href="http://yoursite.com/2017/04/29/git%E4%BD%BF%E7%94%A8%E5%AE%9E%E5%BD%95%20%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E5%8C%85%E5%90%AB%E8%BF%87%E5%A4%A7%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/04/29/git使用实录 提交记录包含过大文件问题/</id>
    <published>2017-04-29T09:26:36.000Z</published>
    <updated>2017-04-29T09:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>开发中遇到一个比较蛋疼的问题,因为新公司的项目是直播类型,集成网易的播放器SDK,静态库文件大小103MB超过了git提交文件的限制,且已经被我添加到commit记录中,等反应过来已经为时已晚.<br>不管是回滚还是删除对应文件亦或者添加忽略,提交时都会报文件过大的错误,记录一下自己解决的方法.<br>最后解决办法是先获取所有提交记录中大文件的列表,然后进行删除,因为涉及到对以往提交记录的修改,其实还是有一定风险的.</p>
<a id="more"></a>
<blockquote>
<p>过程</p>
</blockquote>
<p>1.获取大文件列表</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rev-list --objects --all |<span class="string"> grep "$(git verify-pack -v .git/objects/pack/*.idx </span>|<span class="string"> sort -k 3 -n </span>|<span class="string"> tail -5 </span>|<span class="string"> awk '&#123;print$1&#125;')"</span></div></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">66</span>b9f17406fb109070c29a611f2b9e37cce5eecb NELivePlayer/libs/libNELivePlayer.a</div><div class="line">d62d664624dc4668bf02fa307a4b7877714cdad5 Pods/PLPlayerKit/Pod/Library/<span class="class"><span class="keyword">lib</span>/<span class="title">libPLPlayerKit</span>.<span class="title">a</span></span></div><div class="line">a03e179bd2a474326afd6f594de933aa9bd9b9f0 Pods/PLPlayerKit/Pod/Library/<span class="class"><span class="keyword">lib</span>/<span class="title">libavcodec</span>.<span class="title">a</span></span></div><div class="line">a44851e9099ceaf519e595cbb416d267ee4bbb18 Pods/PLPlayerKit/Pod/Library/<span class="class"><span class="keyword">lib</span>/<span class="title">libcrypto</span>.<span class="title">a</span></span></div></pre></td></tr></table></figure>
<p>libNELivePlayer.a就是报错的罪魁祸首</p>
<p>删除所有带有libNELivePlayer.a文件的记录<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">filter</span>-branch -<span class="keyword">f</span> --prune-<span class="built_in">empty</span> --<span class="built_in">index</span>-<span class="built_in">filter</span> <span class="string">'git rm -rf --cached --ignore-unmatch NELivePlayer/libs/libNELivePlayer.a'</span> --<span class="keyword">tag</span>-name-<span class="built_in">filter</span> <span class="keyword">cat</span> -- --<span class="keyword">all</span></div></pre></td></tr></table></figure></p>
<p>执行完 再回到sourcetree,可以看到含有libNELivePlayer.a的提交记录都已经不见了,重新点提交,问题解决.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发中遇到一个比较蛋疼的问题,因为新公司的项目是直播类型,集成网易的播放器SDK,静态库文件大小103MB超过了git提交文件的限制,且已经被我添加到commit记录中,等反应过来已经为时已晚.&lt;br&gt;不管是回滚还是删除对应文件亦或者添加忽略,提交时都会报文件过大的错误,记录一下自己解决的方法.&lt;br&gt;最后解决办法是先获取所有提交记录中大文件的列表,然后进行删除,因为涉及到对以往提交记录的修改,其实还是有一定风险的.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>使用Jenkins+Git+蒲公英搭建iOS持续集成平台</title>
    <link href="http://yoursite.com/2017/02/14/%E4%BD%BF%E7%94%A8Jenkins+Git+%E8%92%B2%E5%85%AC%E8%8B%B1%E6%90%AD%E5%BB%BAiOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2017/02/14/使用Jenkins+Git+蒲公英搭建iOS持续集成平台/</id>
    <published>2017-02-14T05:12:10.000Z</published>
    <updated>2017-02-21T14:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Jenkins介绍</p>
</blockquote>
<p>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：<br>1、持续的软件版本发布/测试项目。<br>2、监控外部调用执行的工作。</p>
<a id="more"></a>
<p>-</p>
<blockquote>
<p>Jenkins安装</p>
</blockquote>
<p>Jenkins可以通过命令行安装,也可以通过pkg文件安装,下载地址<a href="https://jenkins.io/index.html" target="_blank" rel="external">https://jenkins.io/index.html</a><br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872934225188.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872934575328.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872934734454.jpg" alt=""></p>
<p>安装完成之后可以在Terminal中通过命令启动Jenkins.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//启动Jenkins</span></div><div class="line"><span class="built_in">open</span> /Applications/Jenkins/jenkins.war</div></pre></td></tr></table></figure>
<p>启动后在浏览器地址框输入<code>http://localhost:8080/</code>就可以打开Jenkins界面<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872958115233.jpg" alt=""></p>
<h4 id="注-默认端口是8080-如果8080端口被占用可以通过Terminal命令来改变Jenkins的启动端口"><a href="#注-默认端口是8080-如果8080端口被占用可以通过Terminal命令来改变Jenkins的启动端口" class="headerlink" title="注:默认端口是8080,如果8080端口被占用可以通过Terminal命令来改变Jenkins的启动端口"></a>注:默认端口是8080,如果8080端口被占用可以通过Terminal命令来改变Jenkins的启动端口</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults <span class="keyword">write</span> /<span class="keyword">Library</span>/Preferences/org.jenkins-ci httpPort <span class="number">7070</span></div></pre></td></tr></table></figure>
<p>-</p>
<blockquote>
<p>Jenkins构建配置</p>
</blockquote>
<p>####1.插件安装<br>需要安装四个插件:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Xcode integration</div><div class="line">GIT <span class="keyword">plugin</span></div><div class="line"><span class="keyword">Post</span>-Build Script Plug-<span class="keyword">in</span></div><div class="line">GitHub <span class="keyword">plugin</span></div></pre></td></tr></table></figure>
<p>安装方法:<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872962648610.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872963582062.jpg" alt=""></p>
<p>####2.创建-配置项目<br>2.1点击新建-输入项目名称-构建一个自由风格的软件项目<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872965208131.jpg" alt=""></p>
<p>2.2设置源码<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872967323098.jpg" alt=""></p>
<p>设置SSH key<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872968519749.jpg" alt=""></p>
<p>2.3构建<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872969457242.jpg" alt=""></p>
<p>设置<strong>General build settings</strong>信息<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872974070906.jpg" alt=""></p>
<p>设置<strong>Code signing &amp; OS X keychain options</strong><br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872977596802.jpg" alt=""></p>
<p>####注:keychian文件地址为${HOME}/Library/Keychains/login.keychain</p>
<p>2.4设置构建后操作-上传到蒲公英<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872981444109.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872981718036.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872983153771.jpg" alt=""></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>蒲公英上传脚本代码</div><div class="line">curl -F <span class="string">"ipa文件地址"</span> -F <span class="string">"uKey=用户uKey"</span> -F <span class="string">"_api_key=_api_key"</span> https:<span class="regexp">//</span>qiniu-storage.pgyer.com<span class="regexp">/apiv1/</span>app<span class="regexp">/upload</span></div></pre></td></tr></table></figure>
<p>2.5点击保存-返回项目首页点击构建<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872984468868.jpg" alt=""></p>
<p>蒲公英上的项目也正常上传了.<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872984654900.jpg" alt=""></p>
<p>-</p>
<blockquote>
<p>自定义网页展示</p>
</blockquote>
<p>蒲公英提供了开放API可以查询我们上传的APP,具体信息查看蒲公英开放文档.<br><a href="https://www.pgyer.com/doc/api#paramInfo" target="_blank" rel="external">https://www.pgyer.com/doc/api#paramInfo</a><br>这里使用viewGroup接口,获取上传的APP所有版本信息 并在网页上展示,方便测试人员进行扫码安装</p>
<p>注:如果不是企业账号打包的ipa文件 需要提前将测试人员的测试设备添加到开发者账号中</p>
<p>效果展示:<br><img src="http://oif61bzoy.bkt.clouddn.com/JenkinsPlatform14872987618170.jpg" alt=""></p>
<p>自定义网页项目代码地址:<br><a href="https://github.com/yushengchu/JenkinsPlatform" target="_blank" rel="external">https://github.com/yushengchu/JenkinsPlatform</a></p>
<p>觉得有用的小伙伴不妨点个start!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jenkins介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：&lt;br&gt;1、持续的软件版本发布/测试项目。&lt;br&gt;2、监控外部调用执行的工作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="app" scheme="http://yoursite.com/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>RAP+MockJS创建Mock测试数据</title>
    <link href="http://yoursite.com/2017/01/24/RAP+MockJS%E5%88%9B%E5%BB%BAMock%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/01/24/RAP+MockJS创建Mock测试数据/</id>
    <published>2017-01-24T03:10:46.000Z</published>
    <updated>2017-01-26T02:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>在项目开发中经常会用到模拟接口或者说是假数据,一般做法是</p>
<ol>
<li>读取本地json文件</li>
<li>写死一个数据对象</li>
<li>使用本地接口服务器</li>
</ol>
<p>这几种做法固然能满足开发上的需求,却无法很真实的去模拟用户使用产品时的真正情况,数据灵活性上也存在不足.</p>
<a id="more"></a>
<blockquote>
<p>介绍</p>
</blockquote>
<p>RAP是阿里开发人员开发的一款假数据生成平台,可以动态配置接口返回数据,使用mock语法随机生成数据.</p>
<blockquote>
<p>使用</p>
</blockquote>
<p>1.注册登陆</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>//rap.taobao<span class="meta">.org</span>/</div></pre></td></tr></table></figure>
<p>2.创建团队-产品线-分组-项目<br><img src="http://oif61bzoy.bkt.clouddn.com/rap_mock_1.jpg" alt="-w431"></p>
<p>3.创建测试接口定义测试数据</p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/rap_mock_2.jpg" alt="-w1171"></p>
<p>点击创建的项目进入项目编辑页面,点击搜索框边的编辑按钮开始编辑接口.<br>可以定义该接口需要的请求参数和该接口返回的参数列表</p>
<p>例:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//需要返回一段这样的数据</div><div class="line">&#123;</div><div class="line">    <span class="string">"Success"</span>: true,</div><div class="line">    <span class="string">"Data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"Author"</span>: <span class="string">"rkhg"</span>,</div><div class="line">            <span class="string">"CreateTimer"</span>: <span class="string">"1976-06-05 18:50:15"</span>,</div><div class="line">            <span class="string">"ImageUrl"</span>: <span class="string">"http://dummyimage.com/300x150/20bc62)"</span>,</div><div class="line">            <span class="string">"Titile"</span>: <span class="string">"这是标题340000200812217470"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"Author"</span>: <span class="string">"fmsuett"</span>,</div><div class="line">            <span class="string">"CreateTimer"</span>: <span class="string">"1986-05-17 23:00:53"</span>,</div><div class="line">            <span class="string">"ImageUrl"</span>: <span class="string">"http://dummyimage.com/300x150/052a27)"</span>,</div><div class="line">            <span class="string">"Titile"</span>: <span class="string">"这是标题820000200001248542"</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应配置方法:<br><img src="http://oif61bzoy.bkt.clouddn.com/rap_mock_3.jpg" alt=""></p>
<p>mock数据规则:<br><img src="http://oif61bzoy.bkt.clouddn.com/rap_mock_4.jpg" alt=""></p>
<p>定义完成接口后点击秒存保存数据<br>可以点击接口详情边上的红色mock数据按钮,预览接口返回的数据</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在项目开发中经常会用到模拟接口或者说是假数据,一般做法是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取本地json文件&lt;/li&gt;
&lt;li&gt;写死一个数据对象&lt;/li&gt;
&lt;li&gt;使用本地接口服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这几种做法固然能满足开发上的需求,却无法很真实的去模拟用户使用产品时的真正情况,数据灵活性上也存在不足.&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="服务端" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>swift服务端初探1:Vapor框架的安装及基本post/get请求使用</title>
    <link href="http://yoursite.com/2016/12/27/swift%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%88%9D%E6%8E%A21-Vapor%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%ACpost:get%E8%AF%B7%E6%B1%82%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/27/swift服务端初探1-Vapor框架的安装及基本post:get请求使用/</id>
    <published>2016-12-27T06:20:33.000Z</published>
    <updated>2016-12-27T08:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>距离swift发布已经过去了很长一段时间,版本也攀升到了swift3.0.2,swift可以用于开发服务端程序,这让iOS开发者有了一个用同种语言开发前后端的机会,这无疑是一件让人感到非常cool的事情.</p>
<blockquote>
<p>Vapor安装</p>
</blockquote>
<p>Vapor的安装十分简单,使用终端输出三个命令即可.</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检查安装环境</span></div><div class="line"><span class="symbol">$</span> curl -sL check.vapor.sh | bash</div><div class="line"><span class="comment">//安装</span></div><div class="line"><span class="symbol">$</span> curl -sL toolbox.vapor.sh | bash</div><div class="line"><span class="comment">//查看是否安装成功</span></div><div class="line"><span class="symbol">$</span> vapor --help</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828200644566.jpg" alt=""></p>
<p>看到这样的反馈,就已经是安装成功的状态了!</p>
<hr>
<blockquote>
<p>Vapor使用</p>
</blockquote>
<pre><code>1. 创建项目
    vapor new PorjectName

2. 创建XCode项目
    //进入项目目录输入命令
    $ vapor xcode -y

3. 修改代码
4. 运行
    cmmamd+R
</code></pre><p><strong>1.创建项目</strong><br>打开终端 输入<code>vapor new PorjectName</code>,耐心等待<br>出现以下界面项目就创建完毕了!<br><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828204397567.jpg" alt=""></p>
<p><strong>2.创建Xcode项目</strong><br>这一步是可以省略的,Vapor可以直接在终端进行运行,个人还是比较喜欢用Xcode来运行.<br>在终端进入新建的Vapor项目目录输入<code>vapor xcode -y</code><br>出现以下界面即为完成.<br><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828208003326.jpg" alt=""></p>
<p><strong>3.修改代码</strong><br>找到Sources/App目录下的main.swift文件</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">drop</span> = Droplet()</div><div class="line"><span class="comment">//这两行代码中间的代码全部删除</span></div><div class="line"><span class="built_in">drop</span>.<span class="keyword">run</span>()</div></pre></td></tr></table></figure>
<p>get请求:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//get</span></div><div class="line"><span class="comment">//无参数get返回</span></div><div class="line">drop.<span class="keyword">get</span> &#123; _ <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> JSON(node:[</div><div class="line">        <span class="string">"message"</span>:<span class="string">"hello,world!"</span></div><div class="line">        ])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 0.0.0.0:8080/hello 返回</span></div><div class="line">drop.<span class="keyword">get</span>(<span class="string">"hello"</span>) &#123; request <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> JSON (node: [</div><div class="line">        <span class="string">"message"</span>: <span class="string">"hello,world!"</span></div><div class="line">        ])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>post请求:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//post</span></div><div class="line">drop.post(<span class="string">"post"</span>)&#123; request <span class="keyword">in</span></div><div class="line">    <span class="comment">//对提取的参数进行guard判断 不符合则返回一个失败的请求</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> name = request.data[<span class="string">"name"</span>]?.string <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">Abort</span>.badRequest</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//json序列化输出</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">JSON</span>(node: [</div><div class="line">        <span class="string">"name"</span>: <span class="string">"hello <span class="subst">\(name)</span>!"</span></div><div class="line">        ])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4.运行项目</strong><br>Commamd+R运行,运行完成控制台会输出本地调试的地址.</p>
<p>get请求效果:</p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828215731605.jpg" alt=""></p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828216722227.jpg" alt=""></p>
<p>post请求效果(使用postman):</p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/FirstVaporServer14828217131831.jpg" alt=""></p>
<blockquote>
<p>后语</p>
</blockquote>
<p>做到这一步,就可以使用Vapor来做一个本地API服务器了,也可以将Vapor部署到远程服务器上,作为远程服务器来使用,Vapor更多功能使用可以去Vapor的官网<a href="http://vapor.codes/" target="_blank" rel="external">http://vapor.codes/</a> 查看文档.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;距离swift发布已经过去了很长一段时间,版本也攀升到了swift3.0.2,swift可以用于开发服务端程序,这让iOS开发者有了一个用同种语言开发前后端的机会,这无疑是一件让人感到非常cool的事情.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vapor安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vapor的安装十分简单,使用终端输出三个命令即可.&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检查安装环境&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;$&lt;/span&gt; curl -sL check.vapor.sh | bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//安装&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;$&lt;/span&gt; curl -sL toolbox.vapor.sh | bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//查看是否安装成功&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;$&lt;/span&gt; vapor --help&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="服务端" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>基于Xcode的iOS原生UI测试框架 UITests使用 简单case</title>
    <link href="http://yoursite.com/2016/12/22/%E5%9F%BA%E4%BA%8EXcode%E7%9A%84iOS%E5%8E%9F%E7%94%9FUI%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%20UITests%E4%BD%BF%E7%94%A8%20%E7%AE%80%E5%8D%95case/"/>
    <id>http://yoursite.com/2016/12/22/基于Xcode的iOS原生UI测试框架 UITests使用 简单case/</id>
    <published>2016-12-22T09:31:47.000Z</published>
    <updated>2016-12-28T03:44:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>随着APP功能的不断增加,仅仅靠黑盒测试人工来覆盖测试无疑有很大的局限性,效果也不如人意,尤其是新功能增加后可能要对旧功能做回归测试,产生了大量的重复工作,而这些重复工作有一些是可以通过自动化测试进行完成的,UITests的出现就是为了解决这个问题.</p>
<blockquote>
<p>UItests介绍</p>
</blockquote>
<p><strong>UITests是什么?</strong></p>
<p>UItests是由苹果公司开发的一个自动测试UI交互的自动化测试框架</p>
<p><strong>UItests能做什么?</strong></p>
<p>UItests可以帮助我们解决一些测试上的重复工作,节省人工成本,提高测试效率等.</p>
<a id="more"></a>
<blockquote>
<p>UITests使用</p>
</blockquote>
<p>新创建的项目可以通过勾选<code>include UI Tests</code>来添加<br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828930082925.jpg" alt=""></p>
<p>现有项目可以通过以下步骤来添加.<br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828931190959.jpg" alt=""><br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828931571036.jpg" alt=""></p>
<p>成功添加UITests组件后,在项目文件导航里可以看到对应目录.<br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828932833875.jpg" alt=""></p>
<p><code>UITestDemoUITests.m</code>就是用来编写测试案例的文件.</p>
<p>注:测试方法都是以test开头的</p>
<p>测试代码可以通过录制和直接编写两种方法来生成,建议先通过自动生成 然后修改自动生成的代码.</p>
<p>声明一个新的测试方法 点击小圆点 自动打开模拟器运行项目 对项目的操作会被用代码的形式记录下来<br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828937595617.jpg" alt=""><br>自动记录的代码也十分好理解,点击了login按钮 再点击了id为Detail的导航栏上的Mune按钮<br>点击左上角的棱形标志则代表执行这个测试方法,自动打开模拟器执行.<br>测试方法执行成功标志內出现一个绿勾,失败则是红叉.<br>测试进行中会在控制台打印参数,包括当前操作 耗时等,测试完成则会打印测试log保存地址.</p>
<p><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828939850490.jpg" alt=""></p>
<blockquote>
<p>简单测试案例</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)testLogi&#123;</div><div class="line">    <span class="built_in">XCUIElement</span> *account = [[<span class="built_in">XCUIApplication</span> alloc] init].textFields[<span class="string">@"account"</span>];</div><div class="line">    <span class="built_in">XCUIElement</span> *pwd = [[<span class="built_in">XCUIApplication</span> alloc] init].textFields[<span class="string">@"password"</span>];</div><div class="line">    <span class="built_in">XCUIApplication</span> *app = [[<span class="built_in">XCUIApplication</span> alloc] init];</div><div class="line">    <span class="comment">//判断账号密码是否都是偶数 是则跳转 不是则直接下一次测试</span></div><div class="line">    <span class="comment">//跳转后等待3s 返回登录界面</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> success = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> failed = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> acc = arc4random() % <span class="number">1000</span>;</div><div class="line">        <span class="keyword">int</span> pw = arc4random() % <span class="number">1000</span>;</div><div class="line">        [account tap];</div><div class="line">        [account typeText:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>,acc]];</div><div class="line">        [pwd tap];</div><div class="line">        [pwd typeText:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>,pw]];</div><div class="line">        </div><div class="line">        <span class="comment">//点击登录</span></div><div class="line">        [app.buttons[<span class="string">@"login"</span>] tap];</div><div class="line">        <span class="comment">//模拟正常登录网络访问等待3s</span></div><div class="line">        [app.windows.navigationBars.element pressForDuration:<span class="number">3</span>];</div><div class="line">        <span class="comment">//判断是否跳转到登录之后的界面 如果是 则登录成功</span></div><div class="line">        <span class="keyword">if</span> ([app.navigationBars.element.identifier isEqualToString:<span class="string">@"Detail"</span>]) &#123;</div><div class="line">            [app.navigationBars[<span class="string">@"Detail"</span>].buttons[<span class="string">@"Mune"</span>] tap];</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"登录成功"</span>);</div><div class="line">            success += <span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"登录失败"</span>);</div><div class="line">            failed += <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"10次测试,成功登录%d次,失败%d次"</span>,success,failed);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果:<br><img src="http://oif61bzoy.bkt.clouddn.com/UITestsFirst14828941940069.jpg" alt=""></p>
<blockquote>
<p>断言</p>
</blockquote>
<p>注:断言结果会记录在测试的log文件中,断言失败则该测试方法不通过.</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//断言,最基本的测试，如果expression为true则通过，否则打印后面格式化字符串</span></div><div class="line"> XCTAssert(<span class="keyword">expression</span>, <span class="keyword">format</span>...)</div><div class="line"></div><div class="line"> <span class="comment">//Bool测试:  </span></div><div class="line"> XCTAssertTrue(<span class="keyword">expression</span>, <span class="keyword">format</span>...)</div><div class="line"> XCTAssertFalse(<span class="keyword">expression</span>, <span class="keyword">format</span>...)</div><div class="line"></div><div class="line"> <span class="comment">//相等测试</span></div><div class="line"> XCTAssertEqual(expression1, expression2, <span class="keyword">format</span>...)</div><div class="line"> XCTAssertNotEqual(expression1, expression2, <span class="keyword">format</span>...)</div><div class="line"></div><div class="line"> <span class="comment">//double float 对比数据测试使用</span></div><div class="line"> XCTAssertEqualWithAccuracy(expression1, expression2, accuracy, <span class="keyword">format</span>...)</div><div class="line"> XCTAssertNotEqualWithAccuracy(expression1, expression2, accuracy, <span class="keyword">format</span>...)</div><div class="line"></div><div class="line"> <span class="comment">//Nil测试，XCTAssert[Not]Nil断言判断给定的表达式值是否为nil</span></div><div class="line"> XCTAssertNil(<span class="keyword">expression</span>, <span class="keyword">format</span>...)</div><div class="line"> XCTAssertNotNil(<span class="keyword">expression</span>, <span class="keyword">format</span>...)</div><div class="line"></div><div class="line"> <span class="comment">//失败断言     </span></div><div class="line"> XCTFail(<span class="keyword">format</span>...)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着APP功能的不断增加,仅仅靠黑盒测试人工来覆盖测试无疑有很大的局限性,效果也不如人意,尤其是新功能增加后可能要对旧功能做回归测试,产生了大量的重复工作,而这些重复工作有一些是可以通过自动化测试进行完成的,UITests的出现就是为了解决这个问题.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UItests介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;UITests是什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UItests是由苹果公司开发的一个自动测试UI交互的自动化测试框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UItests能做什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UItests可以帮助我们解决一些测试上的重复工作,节省人工成本,提高测试效率等.&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>代码解耦-iOS应用內动态跳转解决方案 Routable-iOS简单使用</title>
    <link href="http://yoursite.com/2016/12/22/%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6-iOS%E5%BA%94%E7%94%A8%E5%85%A7%E5%8A%A8%E6%80%81%E8%B7%B3%E8%BD%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%20Routable-iOS%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%20/"/>
    <id>http://yoursite.com/2016/12/22/代码解耦-iOS应用內动态跳转解决方案 Routable-iOS简单使用 /</id>
    <published>2016-12-22T09:31:47.000Z</published>
    <updated>2016-12-23T08:03:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>在APP开发过程中,必然会遇到在WebView和推送消息中打开其他页面的需求,进一步则是在任何动态界面.</p>
<p>但随着APP越来越大,功能模块越来越复杂,采用传统的控制器跳转方式,需要持有跳转对象,就会造成复杂的依赖链,代码耦合性变强.</p>
<p>采用Routable的方式进行动态界面跳转则不会有这个问题.<br><a id="more"></a><br>传统跳转:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ProjectDetailViewController* pro = [[ProjectDetailViewController alloc]init]<span class="comment">;</span></div><div class="line">pro.StrID = @<span class="string">"XX"</span><span class="comment">;</span></div><div class="line">pro.Memo = @<span class="string">"XX"</span><span class="comment">;</span></div><div class="line">[self.navigationController pushViewController:pro animated:YES]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>Routable跳转:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[[Routable sharedRouter]</span> <span class="selector-tag">open</span>:@"<span class="keyword">ProjectDetail</span>/<span class="keyword">XX</span>/<span class="keyword">XX</span>"];</div></pre></td></tr></table></figure>
<blockquote>
<p>Routable使用</p>
</blockquote>
<p>1.注册协议</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般在APP入口didFinishLaunchingWithOptions中进行注册</span></div><div class="line">- (BOOL)<span class="string">application:</span>(UIApplication *)application <span class="string">didFinishLaunchingWithOptions:</span>(NSDictionary *)launchOptions&#123;</div><div class="line">    <span class="comment">//map规则 @"跳转标识/:参数1/:参数2...."</span></div><div class="line">    [[Routable sharedRouter] <span class="string">setNavigationController:</span>nav];</div><div class="line">    [[Routable sharedRouter] <span class="string">map:</span>@<span class="string">"ProjectDetail/:StrID/:Memo/:Name"</span> <span class="string">toController:</span>[ProjectDetailViewController <span class="class"><span class="keyword">class</span>]];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.使用协议进行跳转</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//<span class="literal">open</span>规则 @<span class="string">"跳转标识/参数1/参数2"</span></div><div class="line">[[Routable sharedRouter] <span class="literal">open</span>:@<span class="string">"ProjectDetail/XX/XX"</span>]<span class="comment">;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Routable代码解析</p>
</blockquote>
<p>关键方法:<code>sharedRouter</code> <code>map</code> <code>open</code> <code>setNavigationController</code></p>
<p><code>sharedRouter方法:</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用dispatch_once初始化单例对象 保证一个程序生命周期中使用同一个Router对象</span></div><div class="line">+ (<span class="keyword">instancetype</span>)sharedRouter &#123;</div><div class="line">  <span class="keyword">static</span> Routable *_sharedRouter = <span class="literal">nil</span>;</div><div class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">    _sharedRouter = [[Routable alloc] init];</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> _sharedRouter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>map方法:</code></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)map:(NSString *)format toController:(<span class="keyword">Class</span>)controllerClass withOptions:(UPRouterOptions *)<span class="keyword">options</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!format) &#123;</div><div class="line">    @<span class="keyword">throw</span> [NSException exceptionWithName:@<span class="string">"RouteNotProvided"</span></div><div class="line">                                   reason:@<span class="string">"Route #format is not initialized"</span></div><div class="line">                                 userInfo:nil];</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">options</span>) &#123;</div><div class="line">    <span class="keyword">options</span> = [UPRouterOptions routerOptions];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">options</span>.openClass = controllerClass;</div><div class="line">  <span class="comment">//关键代码 创建UPRouterOptions对象 将传入的类对象作为value 参数字符串作为key存储在可变字典</span></div><div class="line">  [self.routes setObject:<span class="keyword">options</span> forKey:format];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>setNavigationController方法:</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Router对象中有一个navigationController参数 用来保存传入的导航视图控制器 在open方法中会使用这个导航视图控制器进行跳转</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UINavigationController</span> *navigationController;</div></pre></td></tr></table></figure>
<p><code>open方法:</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用Router类中的该方法 将传入的参数格式化成RouterParams对象</span></div><div class="line"><span class="comment">//再通过RouterParams对象从self.routes中获取对应的openClass类对象</span></div><div class="line"><span class="comment">//使用navigationController进行跳转</span></div><div class="line">- (<span class="keyword">void</span>)open:(<span class="built_in">NSString</span> *)url</div><div class="line">    animated:(<span class="built_in">BOOL</span>)animated</div><div class="line"> extraParams:(<span class="built_in">NSDictionary</span> *)extraParams</div><div class="line">&#123;</div><div class="line">  RouterParams *params = [<span class="keyword">self</span> routerParamsForUrl:url extraParams: extraParams];</div><div class="line">  UPRouterOptions *options = params.routerOptions;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (options.callback) &#123;</div><div class="line">    RouterOpenCallback callback = options.callback;</div><div class="line">    callback([params controllerParams]);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">self</span>.navigationController) &#123;</div><div class="line">    <span class="keyword">if</span> (_ignoresExceptions) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"NavigationControllerNotProvided"</span></div><div class="line">                                   reason:<span class="string">@"Router#navigationController has not been set to a UINavigationController instance"</span></div><div class="line">                                 userInfo:<span class="literal">nil</span>];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">UIViewController</span> *controller = [<span class="keyword">self</span> controllerForRouterParams:params];</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.presentedViewController) &#123;</div><div class="line">    [<span class="keyword">self</span>.navigationController dismissViewControllerAnimated:animated completion:<span class="literal">nil</span>];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> ([options isModal]) &#123;</div><div class="line">    <span class="keyword">if</span> ([controller.class isSubclassOfClass:<span class="built_in">UINavigationController</span>.class]) &#123;</div><div class="line">      [<span class="keyword">self</span>.navigationController presentViewController:controller</div><div class="line">                                              animated:animated</div><div class="line">                                            completion:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">UINavigationController</span> *navigationController = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:controller];</div><div class="line">      navigationController.modalPresentationStyle = controller.modalPresentationStyle;</div><div class="line">      navigationController.modalTransitionStyle = controller.modalTransitionStyle;</div><div class="line">      [<span class="keyword">self</span>.navigationController presentViewController:navigationController</div><div class="line">                                              animated:animated</div><div class="line">                                            completion:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (options.shouldOpenAsRootViewController) &#123;</div><div class="line">    [<span class="keyword">self</span>.navigationController setViewControllers:@[controller] animated:animated];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    [<span class="keyword">self</span>.navigationController pushViewController:controller animated:animated];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在APP开发过程中,必然会遇到在WebView和推送消息中打开其他页面的需求,进一步则是在任何动态界面.&lt;/p&gt;
&lt;p&gt;但随着APP越来越大,功能模块越来越复杂,采用传统的控制器跳转方式,需要持有跳转对象,就会造成复杂的依赖链,代码耦合性变强.&lt;/p&gt;
&lt;p&gt;采用Routable的方式进行动态界面跳转则不会有这个问题.&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>代码优化-更精简的tableView,抽离tableView DataSource Delegate</title>
    <link href="http://yoursite.com/2016/12/22/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E6%9B%B4%E7%B2%BE%E7%AE%80%E7%9A%84tableView,%E6%8A%BD%E7%A6%BBtableView%20DataSource%20Delegate/"/>
    <id>http://yoursite.com/2016/12/22/代码优化-更精简的tableView,抽离tableView DataSource Delegate/</id>
    <published>2016-12-22T08:52:43.000Z</published>
    <updated>2016-12-22T08:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>　　UITableView无疑是我们在开发iOS应用中使用频率非常高的一个控件,使用方法无外乎创建对象,关联delegate,datasource,实现对应方法.</p>
<p>　　几乎是在每一次使用UITableView的时候,都会去调用几个固定的方法,例如</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回数量</span></div><div class="line"><span class="selector-tag">-</span> (NSInteger)<span class="selector-tag">tableView</span><span class="selector-pseudo">:(UITableView</span> *)<span class="selector-tag">tableView</span> <span class="selector-tag">numberOfRowsInSection</span><span class="selector-pseudo">:(NSInteger)section</span>;</div><div class="line"><span class="comment">//返回高度</span></div><div class="line"><span class="selector-tag">-</span> (CGFloat)<span class="selector-tag">tableView</span><span class="selector-pseudo">:(UITableView</span> *)<span class="selector-tag">tableView</span> <span class="selector-tag">heightForRowAtIndexPath</span><span class="selector-pseudo">:(NSIndexPath</span> *)<span class="selector-tag">indexPath</span>;</div><div class="line"><span class="comment">//返回cell实例对象</span></div><div class="line"><span class="selector-tag">-</span> (UITableViewCell *)<span class="selector-tag">tableView</span><span class="selector-pseudo">:(UITableView</span> *)<span class="selector-tag">tableView</span> <span class="selector-tag">cellForRowAtIndexPath</span><span class="selector-pseudo">:(NSIndexPath</span> *)<span class="selector-tag">indexPath</span></div><div class="line"><span class="comment">//cell点击事件</span></div><div class="line"><span class="selector-tag">-</span> (void) <span class="selector-tag">tableView</span><span class="selector-pseudo">:(UITableView</span> *)<span class="selector-tag">tableView</span> <span class="selector-tag">didSelectRowAtIndexPath</span><span class="selector-pseudo">:(NSIndexPath</span> *)<span class="selector-tag">indexPath</span></div></pre></td></tr></table></figure>
<p>　　这无疑是多了很多重复性质的代码,是否有办法可以简化UITableView的使用,避免这些重复性质的代码,同时能兼容大部分情况UITableView的使用呢?</p>
<p>　　将UITableView的Deleaget,DataSource抽离出来无疑是一个比较好的办法,实现一个通用的负责代理方法实现的类,通过block来回调,减少VC代码量.<br><a id="more"></a></p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><h2 id="通用处理类CustomDeleagte-h"><a href="#通用处理类CustomDeleagte-h" class="headerlink" title="通用处理类CustomDeleagte.h"></a>通用处理类<code>CustomDeleagte.h</code></h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^TableViewCellConfigureBlock)(<span class="built_in">NSIndexPath</span>* indexPath, <span class="keyword">id</span> cell, <span class="keyword">id</span> item);</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^TableViewCellDidSelectBlock)(<span class="built_in">NSIndexPath</span>* indexPath, <span class="keyword">id</span> cell, <span class="keyword">id</span> item);</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">CGFloat</span> (^TableViewCellHeightBlock)(<span class="built_in">NSIndexPath</span>* indexPath, <span class="keyword">id</span> item);</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomDeleagte</span> : <span class="title">NSObject</span> &lt;<span class="title">UITableViewDataSource</span>,<span class="title">UITableViewDelegate</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithItems:(<span class="built_in">NSArray</span> *)aItems</div><div class="line">     cellIdentifier:(<span class="built_in">NSString</span> *)aIdentifier</div><div class="line"> configureCellBlock:(TableViewCellConfigureBlock)aConfigureCellBlock</div><div class="line">    cellHeightBlock:(TableViewCellHeightBlock)aHeightBlock</div><div class="line">     didSelectBlock:(TableViewCellDidSelectBlock)aDidSelectBlock;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)handleTableViewDataSourceAndDelegate:(<span class="built_in">UITableView</span>*)aTableView;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)itemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *items;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>1.<code>TableViewCellConfigureBlock</code>用于传入数据源,加载数据<br>2.<code>TableViewCellDidSelectBlock</code>回调点击事件<br>3.<code>TableViewCellHeightBlock</code>计算cell高度</p>
<p>三个block基本涵盖了UITableView的一般使用.</p>
<hr>
<p>通用处理类实现<code>CustomDeleagte.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"CustomDeleagte.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"UITableViewCell+Extension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomDeleagte</span>()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span>* cellIdentigier;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) TableViewCellConfigureBlock configureCellBlock;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) TableViewCellDidSelectBlock didSelectBlock;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) TableViewCellHeightBlock heightBlock;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomDeleagte</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithItems:(<span class="built_in">NSArray</span> *)aItems</div><div class="line">     cellIdentifier:(<span class="built_in">NSString</span> *)aIdentifier</div><div class="line"> configureCellBlock:(TableViewCellConfigureBlock)aConfigureCellBlock</div><div class="line">    cellHeightBlock:(TableViewCellHeightBlock)aHeightBlock</div><div class="line">didSelectBlock:(TableViewCellDidSelectBlock)aDidSelectBlock&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.items = aItems;</div><div class="line">        <span class="keyword">self</span>.cellIdentigier = aIdentifier;</div><div class="line">        <span class="keyword">self</span>.configureCellBlock = aConfigureCellBlock;</div><div class="line">        <span class="keyword">self</span>.heightBlock = aHeightBlock;</div><div class="line">        <span class="keyword">self</span>.didSelectBlock = aDidSelectBlock;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)itemAtIndexPath:(<span class="built_in">NSIndexPath</span>*)indexPath&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.items[(<span class="built_in">NSUInteger</span>)indexPath.row];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.items.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span>*)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="built_in">UITableViewCell</span>* cell = [tableView dequeueReusableCellWithIdentifier:<span class="keyword">self</span>.cellIdentigier];</div><div class="line">    <span class="keyword">if</span> (!cell) &#123;</div><div class="line">        [<span class="built_in">UITableViewCell</span> registerTabelView:tableView nibIdentifier:<span class="keyword">self</span>.cellIdentigier];</div><div class="line">        cell = [tableView dequeueReusableCellWithIdentifier:<span class="keyword">self</span>.cellIdentigier];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">id</span> item = [<span class="keyword">self</span> itemAtIndexPath:indexPath];</div><div class="line">    <span class="keyword">self</span>.configureCellBlock(indexPath,cell,item);</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="keyword">id</span> item = [<span class="keyword">self</span> itemAtIndexPath:indexPath];</div><div class="line">    <span class="keyword">id</span> cell = [tableView cellForRowAtIndexPath:indexPath];</div><div class="line">    <span class="keyword">self</span>.didSelectBlock(indexPath,cell,item);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册delegate,datasource</span></div><div class="line">- (<span class="keyword">void</span>)handleTableViewDataSourceAndDelegate:(<span class="built_in">UITableView</span> *)aTableView&#123;</div><div class="line">    aTableView.delegate = <span class="keyword">self</span>;</div><div class="line">    aTableView.dataSource = <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="keyword">id</span> item = [<span class="keyword">self</span> itemAtIndexPath:indexPath];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.heightBlock(indexPath,item);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<p>给UITableViewCell扩展几个方法</p>
<p><code>UITableViewCell+Extension.h</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITableViewCell</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line"><span class="comment">//注册cell</span></div><div class="line">+ (<span class="keyword">void</span>)registerTabelView:(<span class="built_in">UITableView</span>*)aTable</div><div class="line">            nibIdentifier:(<span class="built_in">NSString</span>*)identifier;</div><div class="line"></div><div class="line"><span class="comment">//载入数据</span></div><div class="line">- (<span class="keyword">void</span>)configure:(<span class="built_in">UITableViewCell</span>*)aCell</div><div class="line">        custimObj:(<span class="keyword">id</span>)obj</div><div class="line">        indexPath:(<span class="built_in">NSIndexPath</span>*)indexPath;</div><div class="line"></div><div class="line"><span class="comment">//根据数据源计算cell高度 默认返回44.0f</span></div><div class="line">+ (<span class="built_in">CGFloat</span>)getCellHeightWitCustomObj:(<span class="keyword">id</span>)obj</div><div class="line">                           indexPath:(<span class="built_in">NSIndexPath</span>*)indexPath;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>UITableViewCell+Extension.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UITableViewCell+Extension.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITableViewCell</span> (<span class="title">Extension</span>)</span></div><div class="line"></div><div class="line"><span class="comment">//注册cell</span></div><div class="line">+ (<span class="keyword">void</span>)registerTabelView:(<span class="built_in">UITableView</span>*)aTable</div><div class="line">            nibIdentifier:(<span class="built_in">NSString</span>*)identifier&#123;</div><div class="line">    [aTable registerNib:[<span class="built_in">UINib</span> nibWithNibName:identifier bundle:<span class="literal">nil</span>] forCellReuseIdentifier:identifier];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//载入数据</span></div><div class="line">- (<span class="keyword">void</span>)configure:(<span class="built_in">UITableViewCell</span>*)aCell</div><div class="line">        custimObj:(<span class="keyword">id</span>)obj</div><div class="line">        indexPath:(<span class="built_in">NSIndexPath</span>*)indexPath&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//根据数据源计算cell高度 默认返回44.0f</span></div><div class="line">+ (<span class="built_in">CGFloat</span>)getCellHeightWitCustomObj:(<span class="keyword">id</span>)obj</div><div class="line">                           indexPath:(<span class="built_in">NSIndexPath</span>*)indexPath&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">44.0</span>f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在自定义cell的类中重写这两个方法<br><code>configure</code>用于数据加载<br><code>getCellHeightWitCustomObj</code>用于计算高度</p>
<p><code>registerTabelView</code>方法在CusetDelegate中用于注册cell到对应tableView</p>
<hr>
<p>代码中的使用方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.data = [[<span class="built_in">NSArray</span> alloc]init];</div><div class="line"></div><div class="line"><span class="keyword">self</span>.tab = [[<span class="built_in">UITableView</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kScreenWidth, kScreenHeight) style:<span class="built_in">UITableViewStylePlain</span>];</div><div class="line"></div><div class="line">TableViewCellConfigureBlock ConfigBlock = ^(<span class="built_in">NSIndexPath</span>* indexPath,WelfareRuleCell* cell,<span class="keyword">id</span> item)&#123;</div><div class="line">    [cell configure:cell custimObj:item indexPath:indexPath];</div><div class="line">&#125;;</div><div class="line">TableViewCellDidSelectBlock DidBlock = ^(<span class="built_in">NSIndexPath</span>* indexPath,<span class="keyword">id</span> cell,<span class="keyword">id</span> item)&#123;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line">TableViewCellHeightBlock heightBlock = ^<span class="built_in">CGFloat</span>(<span class="built_in">NSIndexPath</span>* indexPath,<span class="keyword">id</span> item)&#123;</div><div class="line">    <span class="keyword">return</span> [WelfareRuleCell getCellHeightWitCustomObj:item indexPath:indexPath];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">self</span>.customDelegate = [[CustomDeleagte alloc]initWithItems:_data</div><div class="line">                                            cellIdentifier:<span class="string">@"WelfareRuleCell"</span></div><div class="line">                                        configureCellBlock:ConfigBlock</div><div class="line">                                           cellHeightBlock:heightBlock</div><div class="line">                                            didSelectBlock:DidBlock];</div><div class="line">[<span class="keyword">self</span>.customDelegate handleTableViewDataSourceAndDelegate:<span class="keyword">self</span>.tab];</div><div class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.tab];</div></pre></td></tr></table></figure>
<p>自定义cell类</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"WelfareRuleCell.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">WelfareRuleCell</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="comment">// Initialization code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)configure:(<span class="built_in">UITableViewCell</span> *)aCell custimObj:(<span class="keyword">id</span>)obj indexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="comment">//数据加载</span></div><div class="line">    <span class="keyword">self</span>.XXX = XXX;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)getCellHeightWitCustomObj:(<span class="keyword">id</span>)obj indexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="comment">//计算高度的代码</span></div><div class="line">    <span class="keyword">return</span> xxx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>　　使用抽离Delegate和DataSource的方法来使用tableView,控制器中的代码可以被大大的简化,代码逻辑也能更清晰</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　UITableView无疑是我们在开发iOS应用中使用频率非常高的一个控件,使用方法无外乎创建对象,关联delegate,datasource,实现对应方法.&lt;/p&gt;
&lt;p&gt;　　几乎是在每一次使用UITableView的时候,都会去调用几个固定的方法,例如&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回数量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UITableView&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;numberOfRowsInSection&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSInteger)section&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回高度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (CGFloat)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UITableView&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;heightForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSIndexPath&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;indexPath&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回cell实例对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (UITableViewCell *)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UITableView&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;cellForRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSIndexPath&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;indexPath&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cell点击事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void) &lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UITableView&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;didSelectRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSIndexPath&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;indexPath&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　这无疑是多了很多重复性质的代码,是否有办法可以简化UITableView的使用,避免这些重复性质的代码,同时能兼容大部分情况UITableView的使用呢?&lt;/p&gt;
&lt;p&gt;　　将UITableView的Deleaget,DataSource抽离出来无疑是一个比较好的办法,实现一个通用的负责代理方法实现的类,通过block来回调,减少VC代码量.&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS实现一个类似readme.io的动效登录界面</title>
    <link href="http://yoursite.com/2016/12/22/iOS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCreadme.io%E7%9A%84%E5%8A%A8%E6%95%88%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2016/12/22/iOS实现一个类似readme.io的动效登录界面/</id>
    <published>2016-12-22T06:36:09.000Z</published>
    <updated>2016-12-22T06:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　首先引入一个问题—-<strong>我们为什么需要动效设计?</strong></p>
<p>　　我觉得cocoachina的一篇文章很好的阐述了这个问题的答案，包括加强体验舒适度，减弱不可避免的不适感等等！附链接:<a href="http://blog.jobbole.com/89556/" target="_blank" rel="external">我们为什么需要动效设计</a></p>
<p>　　本文所展示的动效登录界面就是参照文章中列出的<a href="https://dash.readme.io/login" target="_blank" rel="external">readme</a>网站的登录界面所编写的~</p>
<p>　　本文效果Demo已经上传到github，<a href="https://github.com/yushengchu/readmeLoginView" target="_blank" rel="external">点击去下载</a>。</p>
<p>　　最终效果展示：<br>　　<img src="http://upload-images.jianshu.io/upload_images/688404-c7dc919d467f0f2c.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/q/100" alt=""><br><a id="more"></a></p>
<h1 id="第一步：界面搭建"><a href="#第一步：界面搭建" class="headerlink" title="第一步：界面搭建"></a>第一步：界面搭建</h1><p>　　简单的使用storyboard进行界面拖拽,通过界面层次透视图可以清楚看到界面逻辑,猫头鹰的两个圆形手和两个捂住眼睛的手都是imageView，其中捂住眼睛的手是事先放置在输入账户密码的界面后面被遮住。<br><img src="http://upload-images.jianshu.io/upload_images/688404-ef576e40b2a2104b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/q/100" alt=""></p>
<h1 id="第二步：动画效果实现"><a href="#第二步：动画效果实现" class="headerlink" title="第二步：动画效果实现"></a>第二步：动画效果实现</h1><p><img src="http://upload-images.jianshu.io/upload_images/688404-25527318cba51d42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/q/100" alt=""></p>
<p>　　这段代码实现的效果是在0.5s的时间内同时将隐藏在输入框界面后的捂眼手上移到指定位置，以及将本来趴在框上的手，一边向指定位置移动一边缩小一直到完全消失。</p>
<p>　　由于两个手的颜色是相同的，移动轨迹上又是重叠的，所以实际效果会使人产生一种错觉，这个手是在慢慢变化的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　首先引入一个问题—-&lt;strong&gt;我们为什么需要动效设计?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我觉得cocoachina的一篇文章很好的阐述了这个问题的答案，包括加强体验舒适度，减弱不可避免的不适感等等！附链接:&lt;a href=&quot;http://blog.jobbole.com/89556/&quot;&gt;我们为什么需要动效设计&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　本文所展示的动效登录界面就是参照文章中列出的&lt;a href=&quot;https://dash.readme.io/login&quot;&gt;readme&lt;/a&gt;网站的登录界面所编写的~&lt;/p&gt;
&lt;p&gt;　　本文效果Demo已经上传到github，&lt;a href=&quot;https://github.com/yushengchu/readmeLoginView&quot;&gt;点击去下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　最终效果展示：&lt;br&gt;　　&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/688404-c7dc919d467f0f2c.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/q/100&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发-图形验证码绘图实例</title>
    <link href="http://yoursite.com/2016/12/22/iOS%E5%BC%80%E5%8F%91-%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/12/22/iOS开发-图形验证码绘图实例/</id>
    <published>2016-12-22T06:05:22.000Z</published>
    <updated>2016-12-22T06:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言:</p>
</blockquote>
<p>公司项目需求获取短信验证码前需要输入图形验证码防止羊毛客使用脚本批量注册平台账号<br>想了想还是自己重新实现了一下.</p>
<blockquote>
<p>思路</p>
</blockquote>
<pre><code>1.容器创建
    1.1 代码创建
    1.2 nib文件使用 
2.创建验证码字符串 
2.绘图
    2.1 绘字
    2.2 绘干扰线 
4.点击刷新机制
</code></pre><a id="more"></a>
<blockquote>
<p>代码实例</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ImageCodeView.h</span></div><div class="line"><span class="comment">//  VerCodeView</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by hpjr on 2016/12/22.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 sands. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#import <span class="meta-string">"ImageCodeView.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#define CODE_LENGTH 4</span></div><div class="line"><span class="meta">#define ARCNUMBER arc4random() % 100 / 100.0</span></div><div class="line"><span class="meta">#define ARC_COLOR [UIColor colorWithRed:ARCNUMBER green:ARCNUMBER blue:ARCNUMBER alpha:0.2]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ImageCodeView</span></span></div><div class="line"></div><div class="line"><span class="comment">//初始化</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupUI];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//兼容nib使用</span></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib&#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    [<span class="keyword">self</span> setupUI];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置默认参数</span></div><div class="line">- (<span class="keyword">void</span>)setupUI&#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.CodeArr = @[<span class="string">@"0"</span>,<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>,<span class="string">@"4"</span>,<span class="string">@"5"</span>,<span class="string">@"6"</span>,<span class="string">@"7"</span>,<span class="string">@"8"</span>,<span class="string">@"9"</span>,<span class="string">@"A"</span>,<span class="string">@"B"</span>,<span class="string">@"C"</span>,<span class="string">@"D"</span>,<span class="string">@"E"</span>,<span class="string">@"F"</span>,<span class="string">@"G"</span>,<span class="string">@"H"</span>,<span class="string">@"I"</span>,<span class="string">@"J"</span>,<span class="string">@"K"</span>,<span class="string">@"L"</span>,<span class="string">@"M"</span>,<span class="string">@"N"</span>,<span class="string">@"O"</span>,<span class="string">@"P"</span>,<span class="string">@"Q"</span>,<span class="string">@"R"</span>,<span class="string">@"S"</span>,<span class="string">@"T"</span>,<span class="string">@"U"</span>,<span class="string">@"V"</span>,<span class="string">@"W"</span>,<span class="string">@"X"</span>,<span class="string">@"Y"</span>,<span class="string">@"Z"</span>,<span class="string">@"a"</span>,<span class="string">@"b"</span>,<span class="string">@"c"</span>,<span class="string">@"d"</span>,<span class="string">@"e"</span>,<span class="string">@"f"</span>,<span class="string">@"g"</span>,<span class="string">@"h"</span>,<span class="string">@"i"</span>,<span class="string">@"j"</span>,<span class="string">@"k"</span>,<span class="string">@"l"</span>,<span class="string">@"m"</span>,<span class="string">@"n"</span>,<span class="string">@"o"</span>,<span class="string">@"p"</span>,<span class="string">@"q"</span>,<span class="string">@"r"</span>,<span class="string">@"s"</span>,<span class="string">@"t"</span>,<span class="string">@"u"</span>,<span class="string">@"v"</span>,<span class="string">@"w"</span>,<span class="string">@"x"</span>,<span class="string">@"y"</span>,<span class="string">@"z"</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">UITapGestureRecognizer</span>* changeCode = [[<span class="built_in">UITapGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span></div><div class="line">                                                                                action:<span class="keyword">@selector</span>(changeCode)];</div><div class="line">    [<span class="keyword">self</span> addGestureRecognizer:changeCode];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.backgroundColor = ARC_COLOR;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> getStrCode];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//随机生成验证码字符串</span></div><div class="line">- (<span class="keyword">void</span>)getStrCode&#123;</div><div class="line">    <span class="keyword">self</span>.backgroundColor = ARC_COLOR;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableString</span>* tmpStr = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:<span class="number">5</span>];;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CODE_LENGTH; i++) &#123;</div><div class="line">        <span class="built_in">NSInteger</span> index = arc4random() % (<span class="keyword">self</span>.CodeArr.count<span class="number">-1</span>);</div><div class="line">        [tmpStr appendString:[<span class="keyword">self</span>.CodeArr objectAtIndex:index]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.CodeStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,tmpStr];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//刷新验证码</span></div><div class="line">- (<span class="keyword">void</span>)changeCode&#123;</div><div class="line">    [<span class="keyword">self</span> getStrCode];</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:rect];</div><div class="line">    <span class="built_in">CGSize</span> cSize = [<span class="string">@"A"</span> sizeWithAttributes:@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>]&#125;];<span class="comment">//计算单个字所需空间</span></div><div class="line">    <span class="keyword">int</span> width = rect.size.width / <span class="keyword">self</span>.CodeStr.length - cSize.width;<span class="comment">//间距</span></div><div class="line">    <span class="keyword">int</span> height = rect.size.height - cSize.height;<span class="comment">//可浮动高度</span></div><div class="line">    <span class="built_in">CGPoint</span> point;</div><div class="line">    <span class="comment">//绘码</span></div><div class="line">    <span class="keyword">float</span> pX, pY;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.CodeStr.length; i++)</div><div class="line">    &#123;</div><div class="line">        pX = arc4random() % width + rect.size.width / <span class="keyword">self</span>.CodeStr.length * i;</div><div class="line">        pY = arc4random() % height;</div><div class="line">        point = <span class="built_in">CGPointMake</span>(pX, pY);</div><div class="line">        <span class="keyword">unichar</span> c = [<span class="keyword">self</span>.CodeStr characterAtIndex:i];</div><div class="line">        <span class="built_in">NSString</span> *textC = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%C"</span>, c];</div><div class="line">        [textC drawAtPoint:point withAttributes:@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20</span>]&#125;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//干扰线</span></div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(context, <span class="number">1.0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cout = <span class="number">0</span>; cout &lt; <span class="number">10</span>; cout++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, [ARC_COLOR <span class="built_in">CGColor</span>]);</div><div class="line">        pX = arc4random() % (<span class="keyword">int</span>)rect.size.width;</div><div class="line">        pY = arc4random() % (<span class="keyword">int</span>)rect.size.height;</div><div class="line">        <span class="built_in">CGContextMoveToPoint</span>(context, pX, pY);</div><div class="line">        pX = arc4random() % (<span class="keyword">int</span>)rect.size.width;</div><div class="line">        pY = arc4random() % (<span class="keyword">int</span>)rect.size.height;</div><div class="line">        <span class="built_in">CGContextAddLineToPoint</span>(context, pX, pY);</div><div class="line">        <span class="built_in">CGContextStrokePath</span>(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>最终效果</p>
</blockquote>
<p><img src="http://oif61bzoy.bkt.clouddn.com/ImageCode.gif" alt=""></p>
<blockquote>
<p>项目代码地址</p>
</blockquote>
<p><a href="https://github.com/yushengchu/VerCodeView" target="_blank" rel="external">https://github.com/yushengchu/VerCodeView</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公司项目需求获取短信验证码前需要输入图形验证码防止羊毛客使用脚本批量注册平台账号&lt;br&gt;想了想还是自己重新实现了一下.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.容器创建
    1.1 代码创建
    1.2 nib文件使用 
2.创建验证码字符串 
2.绘图
    2.1 绘字
    2.2 绘干扰线 
4.点击刷新机制
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
      <category term="开发" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Appium+Python iOS自动化测试从0-1</title>
    <link href="http://yoursite.com/2016/12/20/Appium+Python%20iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%BB%8E0-1/"/>
    <id>http://yoursite.com/2016/12/20/Appium+Python iOS自动化测试从0-1/</id>
    <published>2016-12-20T11:22:01.000Z</published>
    <updated>2016-12-20T11:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.Appium环境搭建</strong><br>参考官网appium.io给出的终端命令进行安装.</p>
<pre><code>&gt; brew install node      //安装node
&gt; npm install -g appium  //安装 appium
&gt; npm install wd         //安装 appium client
&gt; appium &amp;               // 启动 appium
&gt; node your-appium-test.js //执行脚本
</code></pre><p>以上安装的是终端版的appium,再安装一个图形界面的appium方便查看界面元素.<br><a id="more"></a><br><strong>2.测试包编译 appium参数设置</strong><br>　　2.1测试包编译:<br>　　　　1.跟开发要.app后缀的测试包<br>　　　　2.本地搭建iOS开发环境 使用xcodebuilder命令编译<br>　　　　<code>xcodebuild -sdk iphonesimulator -target YouProject</code></p>
<p>　　２.２参数设置<br>　　　　图形界面:<br>　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-5.png" alt=""><br>　　　　　　点击选择平台,跳出设置参数界面,选择好运行设备,版本号,测试app的路径点击放大镜图标运行.<br>　　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-4.png" alt=""><br>　　　　　　成功运行后会弹出模拟器并自动运行测试项目．<br>　　　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-7.jpeg" alt=""><br>　　　　　　Appium inspector:<br>　　　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-1.jpeg" alt=""><br>　　　　　　　　例:选中一个控件,点击tap按钮,脚本框內自动生成脚本,模拟器自动根据动作进行操作.<br>　　　　终端使用:<br>　　　　　　终端使用需要另外安装一个appium client,按照用来编写脚本程序的语言不同安装对应,具体参照百度.<br>　　　　　　打开终端,输入<code>appium &amp;</code>即可启动<br>　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-2.png" alt=""><br>　　　　　　新建一个终端，进入脚本所在目录运行脚本<br>　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-3.png" alt=""><br>　　　　　　模拟器自动运行<br>　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-6.jpeg" alt=""><br><strong>3.第一个Python测试脚本,基本API解析</strong><br>　　　　<img src="http://oif61bzoy.bkt.clouddn.com/appium0-1-8.png" alt=""><br>　　　　注意点：测试方法必须以test开头或结尾</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.Appium环境搭建&lt;/strong&gt;&lt;br&gt;参考官网appium.io给出的终端命令进行安装.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; brew install node      //安装node
&amp;gt; npm install -g appium  //安装 appium
&amp;gt; npm install wd         //安装 appium client
&amp;gt; appium &amp;amp;               // 启动 appium
&amp;gt; node your-appium-test.js //执行脚本
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上安装的是终端版的appium,再安装一个图形界面的appium方便查看界面元素.&lt;br&gt;
    
    </summary>
    
    
      <category term="Appium" scheme="http://yoursite.com/tags/Appium/"/>
    
      <category term="unittest" scheme="http://yoursite.com/tags/unittest/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Appium+Python测试-输出测试报告</title>
    <link href="http://yoursite.com/2016/12/20/Appium+Python%E6%B5%8B%E8%AF%95-%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2016/12/20/Appium+Python测试-输出测试报告/</id>
    <published>2016-12-20T09:15:09.000Z</published>
    <updated>2016-12-20T09:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.导入HTMLTestRunner<br>　　　　在终端依次使用Python——import sys——print sys.path命令获取site-packages文件夹目录.<br><img src="http://oif61bzoy.bkt.clouddn.com/HTMLTestRunnerDraggedImage.png" alt=""><br>　　　　将下载的HTMLTestRunner.py文件放入site-packages,在脚本文件中引用,不出错即可.</p>
<a id="more"></a>
<p>2.修改启动测试代码<br><img src="http://oif61bzoy.bkt.clouddn.com/HTMLTestRunnerDraggedImage-1.png" alt=""></p>
<p>3.查看输出结果<br>　　　　输出结果可以分为两部分:终端输出和HTML记录输出<br>　　　　终端输出:（．代表案例成功Ｆ代表失败）<br><img src="http://oif61bzoy.bkt.clouddn.com/HTMLTestRunnerDraggedImage-2.png" alt=""><br>　　　　HTML输出:<br><img src="http://oif61bzoy.bkt.clouddn.com/HTMLTestRunnerDraggedImage-3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.导入HTMLTestRunner&lt;br&gt;　　　　在终端依次使用Python——import sys——print sys.path命令获取site-packages文件夹目录.&lt;br&gt;&lt;img src=&quot;http://oif61bzoy.bkt.clouddn.com/HTMLTestRunnerDraggedImage.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;　　　　将下载的HTMLTestRunner.py文件放入site-packages,在脚本文件中引用,不出错即可.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Appium" scheme="http://yoursite.com/tags/Appium/"/>
    
      <category term="unittest" scheme="http://yoursite.com/tags/unittest/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>unittest单元测试案例编写思路</title>
    <link href="http://yoursite.com/2016/12/20/unittest%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B%E7%BC%96%E5%86%99%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2016/12/20/unittest测试案例编写思路/</id>
    <published>2016-12-20T09:06:07.000Z</published>
    <updated>2016-12-20T09:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>编写测试框架的基本思路:</p>
<a id="more"></a>
<pre><code>#coding=utf-8

//1.先设置编码，utf-8可支持中英文，如上，一般放在第一行

//2.注释：包括记录创建时间，创建人，项目名称。

//3.导入unittest模块

//4.定义测试类，父类为unittest.TestCase。

//5.定义setUp()方法用于测试用例执行前的初始化工作。(设置测试包参数)

//6.定义测试用例，以“test_”开头命名的方法(使用unittest.TestCase类下的断

言对用例是否测试通过进行判断,也可以使用@unittest.skip来跳过测试用例)

//7.定义tearDown()方法用于测试用例执行之后的善后工作。

//执行测试用例,并输出测试结果
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写测试框架的基本思路:&lt;/p&gt;
    
    </summary>
    
    
      <category term="unittest" scheme="http://yoursite.com/tags/unittest/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发runtime笔记</title>
    <link href="http://yoursite.com/2016/09/19/iOS%E5%BC%80%E5%8F%91-runtime%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/19/iOS开发-runtime笔记/</id>
    <published>2016-09-19T07:02:58.000Z</published>
    <updated>2016-12-23T08:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>什么是runtime</p>
</blockquote>
<p>我们写的代码在程序运行过程中都会被转化为runtime的C代码执行,例如<code>[target doSomething];</code>会被转化为<code>objc_msgSend(target,@selector(doSomething));</code>.<br>在runtime中,类用结构体来表示</p>
<blockquote>
<p>相关定义</p>
</blockquote>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//描述类中的一个方法</span></div><div class="line">typedef struct objc_method *<span class="function"><span class="keyword">Method</span>;</span></div><div class="line"></div><div class="line"><span class="comment">//实例变量</span></div><div class="line">typedef struct objc_ivar *Ivar;</div><div class="line"></div><div class="line"><span class="comment">//类别Category</span></div><div class="line">typedef struct objc_category *Category;</div><div class="line"></div><div class="line"><span class="comment">//类中声明的属性</span></div><div class="line">typedef struct objc_property *objc_property_t;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>类在runtime中的表示</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类在runtime中的表示</span></div><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa;<span class="comment">//指针，顾名思义，表示是一个什么，</span></div><div class="line">    <span class="comment">//实例的isa指向类对象，类对象的isa指向元类</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></div><div class="line">    Class super_class;  <span class="comment">//指向父类</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;  <span class="comment">//类名</span></div><div class="line">    <span class="keyword">long</span> version;</div><div class="line">    <span class="keyword">long</span> info;</div><div class="line">    <span class="keyword">long</span> instance_size</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars <span class="comment">//成员变量列表</span></div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists; <span class="comment">//方法列表</span></div><div class="line">    <span class="keyword">struct</span> objc_cache *cache;<span class="comment">//缓存</span></div><div class="line">    <span class="comment">//一种优化，调用过的方法存入缓存列表，下次调用先找缓存</span></div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols <span class="comment">//协议列表</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>
<blockquote>
<p>通过runtim获取属性列表</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)getMethonAndProperty&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</div><div class="line">    <span class="comment">//获取属性列表</span></div><div class="line">    objc_property_t *propertyList = class_copyPropertyList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *propertyName = property_getName(propertyList[i]);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"property------&gt;%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:propertyName]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取方法列表</span></div><div class="line">    Method *methodList = class_copyMethodList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        Method method = methodList[i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"method------&gt;%@"</span>,<span class="built_in">NSStringFromSelector</span>(method_getName(method)));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取成员变量列表</span></div><div class="line">    Ivar *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        Ivar myIvar = ivarList[i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"myIvar------&gt;%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(myIvar)]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取协议</span></div><div class="line">    __<span class="keyword">unsafe_unretained</span> Protocol **protocolList = class_copyProtocolList([<span class="keyword">self</span> <span class="keyword">class</span>], &amp;count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        Protocol* mypro = protocolList[i];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"prorocol------&gt;%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:protocol_getName(mypro)]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>方法调用</p>
</blockquote>
<p><strong>如果实例对象调用实例方法,会到实例的isa指针指向的对象操作</strong><br><strong>如果是调用类方法,就会到类对象的isa指针指向的对象中操作</strong></p>
<p>1.先在相应操作的对象中的缓存方法列表去找调用的方法,找到则实现<br>2.如果没找到则去相应对象的方法列表去找,找到则实现<br>3.如果没找到则去相应对象的父类指针所指向的对象中执行1,2,找到则执行<br>4.一直没找到,转向拦截调用,没有重写拦截调用的方法,则报错.</p>
<p><strong>重写父类的方法并不是覆盖父类的方法,而是在子类对象中找到这个方法后就不会再去父类中寻找</strong></p>
<blockquote>
<p>拦截调用</p>
</blockquote>
<p>在方法调用中说到,如果找不到方法会转向拦截,那拦截调用时什么??<br>拦截调用就是在找不到调用的方法,程序崩溃之前,你可以通过重写NSObjct的四个方法来处理.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)<span class="string">resolveClassMethod:</span>(SEL)sel;</div><div class="line">+ (BOOL)<span class="string">resolveInstanceMethod:</span>(SEL)sel;</div><div class="line"><span class="comment">//后两个方法需要转发到其他的类处理</span></div><div class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector;</div><div class="line">- (<span class="keyword">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)anInvocation;</div></pre></td></tr></table></figure>
<ul>
<li>第一个方法是当你调用一个不存在的类方法的时候，会调用这个方法，默认返回NO，你可以加上自己的处理然后返回YES。</li>
<li>第二个方法和第一个方法相似，只不过处理的是实例方法。</li>
<li>第三个方法是将你调用的不存在的方法重定向到一个其他声明了这个方法的类，只需要你返回一个有这个方法的target。</li>
<li>第四个方法是将你调用的不存在的方法打包成<code>NSInvocation</code>传给你。做完你自己的处理后，调用<code>invokeWithTarget:</code>方法让某个target触发这个方法。</li>
</ul>
<blockquote>
<p>动态添加方法</p>
</blockquote>
<p>重写了拦截调用的方法切返回了YES,我们要怎么处理呢?<br>有一个办法是根据传进来的<code>SEL</code>类型的selector动态添加一个方法</p>
<p>首先从外部隐式调用一个不存在的方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是runtime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们写的代码在程序运行过程中都会被转化为runtime的C代码执行,例如&lt;code&gt;[target doSomething];&lt;/code&gt;会被转化为&lt;code&gt;objc_msgSend(target,@selector(doSomething));&lt;/code&gt;.&lt;br&gt;在runtime中,类用结构体来表示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相关定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//描述类中的一个方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct objc_method *&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Method&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实例变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct objc_ivar *Ivar;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类别Category&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct objc_category *Category;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//类中声明的属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;typedef struct objc_property *objc_property_t;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="APP" scheme="http://yoursite.com/tags/APP/"/>
    
      <category term="移动开发" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
